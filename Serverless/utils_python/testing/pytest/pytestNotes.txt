
# https://docs.pytest.org/en/8.0.x/
# https://blog.newmathdata.com/advanced-unit-testing-in-aws-a666e787aa99
# https://docs.pytest.org/en/stable/how-to/monkeypatch.html
#Â https://pytest-mock.readthedocs.io/en/latest/usage.html
# https://docs.python.org/3/library/unittest.mock.html#patch

# http://httpbin.org/

pytest --version
python -m pytest
python -m pytest tests/test-lambda.py

pytest.ini
[pytest]
python_paths = .
testpaths = tests

pytest.ini must be at project root dir
tests should be in /tests folder
conftest.py should be in /tests folder
test class names should be test_*.py *_test.py
test method names should be test_*
modules should have __init__.py or use sys.path.append()

pytest
pytest-env
pytest-dotenv
pytest-mock
pytest-cov
coverage
moto

https://pypi.org/project/pytest-socket/
pip install pytest-socket
pytest tests/unit -vs --disable-socket

pytest tests/unit -vs --cov --log-cli-level=DEBUG
pytest tests -c pytest.ini -vs
pytest -k "test_lambda" -vs      -> Run specific test

pip install -U coverage
coverage run -m pytest -vs
coverage report -m

------------------------------------------------------------------------------------

pytest -m unit                  -> Run only unit tests
pytest -m "not integration"     -> Do not run integration tests
pytest -m "not slow"            -> Run all tests except slow ones
pytest -m "unit or integration" -> Run both unit and integration tests

@pytest.mark.unit
def test_environment_variables():
    pass

@pytest.mark.slow
@pytest.mark.integration
def test_database_connection():
    pass

------------------------------------------------------------------------------------    

pytest --verbose (-v)
pytest -vs
pytest -vs --cov
pytest test_class.py -v (verbose) -s(show print) -c(code coverage)
pytest test_class.py::test_method
pytest test_mod.py::TestClass::test_method
pytest --pyargs pkg.testing
pytest test_unit.py -x (stop after failure) --maxfail=2 (stop after two failures)

pytest --fixtures           -> shows builtin and custom fixtures
pytest -q                   -> quiet mode
pytest --runslow            -> run all tests decorated with the @pytest.mark.slow decorator
pytest -m slow              -> run all tests decorated with the @pytest.mark.slow decorator
pytest --durations=10 -vv   -> get a list of the slowest 10 test durations
pytest --durations=10 --durations-min=1.0 -vv -> get a list of the slowest 10 test durations over 1.0s

pytest -vs 
    --strict-markers: ensure all markers are registered
    --tb=short: shorter traceback format
    --showlocals: show local variables in tracebacks
    --durations=10: show 10 slowest tests


