
# https://platform.openai.com/
# https://platform.openai.com/docs/

# https://platform.openai.com/docs/overview
# https://platform.openai.com/docs/libraries

# Setting up OpenAI SDK:
# export OPENAI_API_KEY="your_api_key_here"
# pip install openai

# =================================================================================================

# https://platform.openai.com/docs/guides/text?api-mode=responses

# An array of content generated by the model is in the output property of the response:
# [
#     {
#         "id": "msg_67b73f697ba4819183a15cc17d011509",
#         "type": "message",
#         "role": "assistant",
#         "content": [
#             {
#                 "type": "output_text",
#                 "text": "Under the soft glow of the moon, Luna the unicorn danced through 
#                          fields of twinkling stardust, leaving trails of dreams for every child asleep.",
#                 "annotations": []
#             }
#         ]
#     }
# ]

# The output array often has more than one item in it -  can contain tool calls, data about 
# reasoning tokens generated by reasoning models, and other items. It is not safe to assume 
# that the model's text output is present at output[0].content[0].text

# Some of our official SDKs include an output_text property on model responses for convenience, 
# which aggregates all text outputs from the model into a single string. This may be useful as a 
# shortcut to access text output from the model.

# In addition to plain text, you can also have the model return structured data in JSON format 
# This feature is called Structured Outputs.


# =================================================================================================
# Text Generation
# =================================================================================================

# from openai import OpenAI
# client = OpenAI()

# response = client.responses.create(
#     model="gpt-4.1",
#     input="Write a one-sentence bedtime story about a unicorn."
# )

# print(response.output_text)


# =================================================================================================
# Image Analysis
# =================================================================================================

# from openai import OpenAI
# client = OpenAI()

# response = client.responses.create(
#     model="gpt-4.1",
#     input=[
#         {"role": "user", "content": "what teams are playing in this image?"},
#         {
#             "role": "user",
#             "content": [
#                 {
#                     "type": "input_image",
#                     "image_url": "https://upload.wikimedia.org/wikipedia/commons/3/3b/LeBron_James_Layup_%28Cleveland_vs_Brooklyn_2018%29.jpg"
#                 }
#             ]
#         }
#     ]
# )

# print(response.output_text)


# =================================================================================================
# Tool Use - Web Search
# =================================================================================================

# from openai import OpenAI
# client = OpenAI()

# response = client.responses.create(
#     model="gpt-4.1",
#     tools=[{"type": "web_search_preview"}],
#     input="What was a positive news story from today?"
# )

# print(response.output_text)


# =================================================================================================
# Streaming
# =================================================================================================

# from openai import OpenAI
# client = OpenAI()

# stream = client.responses.create(
#     model="gpt-4.1",
#     input=[
#         {
#             "role": "user",
#             "content": "Say 'double bubble bath' ten times fast.",
#         },
#     ],
#     stream=True,
# )

# for event in stream:
#     print(event)


# =================================================================================================
# Building Agents
# =================================================================================================

# from agents import Agent, Runner
# import asyncio

# spanish_agent = Agent(
#     name="Spanish agent",
#     instructions="You only speak Spanish.",
# )

# english_agent = Agent(
#     name="English agent",
#     instructions="You only speak English",
# )

# triage_agent = Agent(
#     name="Triage agent",
#     instructions="Handoff to the appropriate agent based on the language of the request.",
#     handoffs=[spanish_agent, english_agent],
# )


# async def main():
#     result = await Runner.run(triage_agent, input="Hola, ¿cómo estás?")
#     print(result.final_output)


# if __name__ == "__main__":
#     asyncio.run(main())

# ¡Hola! Estoy bien, gracias por preguntar. ¿Y tú, cómo estás?