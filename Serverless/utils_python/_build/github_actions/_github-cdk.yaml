name: CDK CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        # Add these in your repository's Settings > Secrets and variables > Actions
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      # env:
      #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   AWS_REGION: ${{ secrets.AWS_REGION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pre-commit isort ruff pytest coverage
        npm install -g aws-cdk
      # pre-commit isort isort black flake8 ruff pytest coverage
    
    - name: Run pre-commit
      run: |
        pre-commit run --all-files
        
    # - name: Run isort
    #   run: |
    #     isort --profile black .

    # - name: Run Ruff
    #   run: |
    #     ruff check . --fix
    #     ruff format .

    # - name: Run PyLint
    #   run: |
    #     pylint --rcfile=.pylintrc . 
    #   # --recursive y --fail-under=8.0 --ignore cdk.out
        
    # - name: Run Black
    #   run: |
    #     black --safe .* 
    
    # - name: Lint with flake8
    #   run: |
    #     flake8 --config=.flake8 .
        
    # - name: Run unit tests
    #   run: |
    #     python -m pytest tests/unit
    #   # python -m coverage run -m pytest
    
    # - name: Run CDK assertions tests
    #   run: |
    #     python -m pytest tests/infra
        
    # - name: CDK synth
    #   run: cdk synth

    # - name: Deploy to AWS
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: |
    #     cdk deploy --all --require-approval never
        
    # - name: Deploy to AWS
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: |
    #     # Capture the stack outputs
    #     OUTPUTS=$(cdk deploy --all --require-approval never --outputs-file outputs.json)
    #     # Extract the URL from outputs and store it as an environment variable
    #     echo "LAMBDA_URL=$(jq -r '.LambdaStack.FunctionUrl' outputs.json)" >> $GITHUB_ENV
        
    # - name: Validate Lambda URL
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: |
    #     echo "Testing Lambda URL: $LAMBDA_URL"
    #     # Wait for 10 seconds to allow Lambda to be fully deployed
    #     sleep 10
    #     # Make the request and check the response
    #     response=$(curl -s -o /dev/null -w "%{http_code}" $LAMBDA_URL)
    #     if [ "$response" != "200" ]; then
    #       echo "Error: Lambda URL returned status code $response"
    #       exit 1
    #     else
    #       echo "Success: Lambda URL is working correctly"
    #     fi