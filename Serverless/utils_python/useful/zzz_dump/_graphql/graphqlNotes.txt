

------------------------------------------------------------------------------------------------------------------------------------------
Type vs Input
------------------------------------------------------------------------------------------------------------------------------------------

Types are used for data that flows out of your API (responses). Defines the structure of data returned by queries and mutations
Inputs are used for data that flows into your API (arguments/variables)


------------------------------------------------------------------------------------------------------------------------------------------
Types

# Types can reference each other circularly

enum NotificationType {
  PROCESSING_COMPLETE
  PROCESSING_FAILED
}

# Types can implement Interface
interface BaseUser {
    name: String!
}
type User extends BaseUser{ ... }

# Types can have:
type User {
    id: ID!
    posts: [Post!]!        # Other types
    commentCount: Int!     # Computed fields
}

type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
    createdAt: String!
}

query GetUser($userId: ID!) {
    user(id: $userId) {
        id
        name
        email
        posts {
            id
            title
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------
Inputs
------------------------------------------------------------------------------------------------------------------------------------------

# Inputs CANNOT have circular references
# Inputs can only have:
input CreateUserInput {
    name: String!          # Scalars only
    tags: [String!]        # Arrays of scalars
    profile: ProfileInput! # Other input types
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

mutation CreateUser($input: CreateUserInput!) {
    createUser(input: $input) {
        id
        name
        email
    }
}

------------------------------------------------------------------------------------------------------------------------------------------
Complete Example:

# Types (for responses)
type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
    createdAt: String!
    updatedAt: String!
}

type Post {
    id: ID!
    title: String!
    content: String!
    author: User!
    publishedAt: String
}

# Inputs (for requests)
input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
}

input CreatePostInput {
    title: String!
    content: String!
    authorId: ID!
    publishDate: String
}

# Mutations using inputs, returning types
type Mutation {
    createUser(input: CreateUserInput!): User!
    updateUser(id: ID!, input: UpdateUserInput!): User!
    createPost(input: CreatePostInput!): Post!
}

# Queries returning types
type Query {
    user(id: ID!): User
    users(limit: Int, offset: Int): [User!]!
    post(id: ID!): Post
}

------------------------------------------------------------------------------------------------------------------------------------------
Best Practices

