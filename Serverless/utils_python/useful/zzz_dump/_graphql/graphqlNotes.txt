
scalar AWSJSON
scalar AWSDate
scalar AWSDateTime
Data: [ItemData!]!

------------------------------------------------------------------------------------------------------------------------------------------
Type vs Input
------------------------------------------------------------------------------------------------------------------------------------------
Types are used for data that flows out of your API (responses). Defines the structure of data returned by queries and mutations
Inputs are used for data that flows into your API (arguments/variables)


------------------------------------------------------------------------------------------------------------------------------------------
Types

# Types can reference each other circularly

enum NotificationType {
  PROCESSING_COMPLETE
  PROCESSING_FAILED
}

# Types can implement Interface
interface BaseUser {
    name: String!
}
type User extends BaseUser{ ... }

# Types can have:
type User {
    id: ID!
    posts: [Post!]!        # Other types
    commentCount: Int!     # Computed fields
}

type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
    createdAt: String!
}

query GetUser($userId: ID!) {
    user(id: $userId) {
        id
        name
        email
        posts {
            id
            title
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------
Inputs
------------------------------------------------------------------------------------------------------------------------------------------

# Inputs CANNOT have circular references
# Inputs can only have:
input CreateUserInput {
    name: String!          # Scalars only
    tags: [String!]        # Arrays of scalars
    profile: ProfileInput! # Other input types
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

mutation CreateUser($input: CreateUserInput!) {
    createUser(input: $input) {
        id
        name
        email
    }
}

------------------------------------------------------------------------------------------------------------------------------------------
Complete Example:

# Types (for responses)
type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
    createdAt: String!
    updatedAt: String!
}

type Post {
    id: ID!
    title: String!
    content: String!
    author: User!
    publishedAt: String
}

# Inputs (for requests)
input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
}

input CreatePostInput {
    title: String!
    content: String!
    authorId: ID!
    publishDate: String
}

# Mutations using inputs, returning types
type Mutation {
    createUser(input: CreateUserInput!): User!
    updateUser(id: ID!, input: UpdateUserInput!): User!
    createPost(input: CreatePostInput!): Post!
}

# Queries returning types
type Query {
    user(id: ID!): User
    users(limit: Int, offset: Int): [User!]!
    post(id: ID!): Post
}

------------------------------------------------------------------------------------------------------------------------------------------
Best Practices

The fundamental rule: Types are for data going out (responses), Inputs are for data coming in (arguments). 
This separation ensures type safety and clear API contracts.

1. Separate Input and Output Types

# Good - separate types
type User { ... }
input CreateUserInput { ... }

# Avoid - reusing types as inputs
# This limits flexibility and can cause issues

2. Use Descriptive Names

input CreateUserInput { ... }
input UpdateUserInput { ... }
input UserFilterInput { ... }

3. Make Inputs Flexible

input UpdateUserInput {
    name: String      # Optional for partial updates
    email: String     # Optional for partial updates
}

------------------------------------------------------------------------------------------------------------------------------------------
Graphene Example

import graphene
from graphene import ObjectType, String, ID, List, InputObjectType, Mutation

# Types (Output)
class UserType(ObjectType):
    id = ID(required=True)
    name = String(required=True)
    email = String(required=True)
    posts = List(lambda: PostType)

class PostType(ObjectType):
    id = ID(required=True)
    title = String(required=True)
    content = String(required=True)
    author = graphene.Field(UserType)

# Inputs
class CreateUserInput(InputObjectType):
    name = String(required=True)
    email = String(required=True)
    password = String(required=True)

class UpdateUserInput(InputObjectType):
    name = String()
    email = String()

# Mutations using inputs
class CreateUser(Mutation):
    class Arguments:
        input = CreateUserInput(required=True)
    
    user = graphene.Field(UserType)
    
    def mutate(self, info, input):
        # Create user logic here
        user = create_user_in_db(input)
        return CreateUser(user=user)

