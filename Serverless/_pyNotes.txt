
https://www.youtube.com/watch?v=NMQwzI9hprg - Step-by-Step Python Package Deployment with GitHub Actions(Poetry + PyPI)
https://github.com/squidfunk/mkdocs-material

python select interpreter: /Users/gtopcu/My Drive/VSCode/aws-templates/.venv

echo $PATH
export PATH=$PATH:/opt/homebrew/bin/python3.13
sudo apt update -y && sudo apt install python3-pip

  pip <command> [options]

  install                     Install packages.
  download                    Download packages.
  uninstall                   Uninstall packages.
  freeze                      Output installed packages in requirements format.
  inspect                     Inspect the python environment.
  list                        List installed packages.
  show                        Show information about installed packages.
  check                       Verify installed packages have compatible dependencies.
  config                      Manage local and global configuration.
  search                      Search PyPI for packages.
  cache                       Inspect and manage pip's wheel cache.
  index                       Inspect information available from package indexes.
  wheel                       Build wheels from your requirements.
  hash                        Compute hashes of package archives.
  completion                  A helper command used for command completion.
  debug                       Show information useful for debugging.
  help                        Show help for commands.

where | which python/pip
python --version
python3 -m venv venv
source venv/bin/activate

pip list | freeze
pip freeze > requirements.txt
python -m pip install --upgrade pip
pip3 install -r requirements.txt
pip3 install --no-cache-dir -r requirements.txt
pip install -r requirements.txt -t dependencies (--target)
(cd dependencies ; zip ../aws_lambda_artifact.zip -r . ; zip aws_lambda_artifact.zip -u main.py)
pip install . (must have 'setup.py' or 'pyproject.toml')
pip install -r requirements-prod.txt -t dist
pip install python-dotenv -q -U (--quiet --upgrade --quiet)
pip install SimpleCV==1.2
pip install requests 
pip install pytest
pip install boto3
pip install botocore
pip install ruff
pip install aws_lambda_powertools
pip install requests-aws4auth
precommit install

pip install SimpleCV==1.*
pip install example-package>=1.2.0
pip install example-package<=1.2.0

pip install pylint
pylint myfile.py    # pylint: disable=all disable=invalid-name 
pylint --rcfile=.pylintrc .
flake8 --config=.flake8 .

# https://www.youtube.com/watch?v=Ji2XDxmXSOM
pip install --upgrade poetry
poetry config virtualenvs.in-project true
poetry new myproject (for existing projects: poetry init -> creates pyproject.toml + poetry.lock) 
poetry install (if pyproject.toml exists, creates venv) --no-root | --sync | --no-interaction
poetry env info -p
poetry env list
poetry env remove {env}
poetry env use {pythonInstallationDir}
poetry shell / exit / deactivate / activate
poetry run (runs from env)
poetry lock (locks dependencies in pyproject.toml)
poetry add "aws-lambda-powertools[aws-sdk]" --group dev 
poetry add boto3 --group dev
poetry add botocore -G dev
poetry add requests
poetry add requests@2.31.0  -> exact version 2.31.0
poetry add requests^2.31.0  -> latest minor version: 2.x.x  (caret) - poetry default
poetry add requests~2.31.0  -> latest patch version: 2.31.x (tilda)
poetry update | requests 
poetry remove requests
poetry show --tree | --all | --nocache
poetry check
poetry build (for dist & wheel)
poetry publish (to pypi.org)
poetry version major | minor | patch -> update project version in pyproject.toml

# https://python-poetry.org/docs/cli/#export
poetry export --without dev -f requirements.txt -o requirements.txt
poetry export (--only|--with|--without dev) --without-hashes -f requirements.txt -o requirements.txt

# https://stackoverflow.com/questions/15031694/installing-python-packages-from-local-file-system-folder-to-virtualenv-with-pip
# Install a project in editable mode (i.e.  setuptools "develop mode") from a local project path or a VCS url:
pip install -e .      - 
pip install -e .[dev]
pip install -e /pkg   -> Top-level directory where 'setup.py' can be found.
pip install localfile.whl

pip install pip-tools
pip-compile -o requirements.txt pyproject.toml (requirements.txt -> pyproject.toml w/ pinned versions)
pip-compile requirements-dev.in
pip-sync requirements-dev.txt

pipenv install aws-lambda-powertools

https://aws.plainenglish.io/streamline-lambda-development-with-poetry-25fbc212a846
https://github.com/micmurawski/poetry-plugin-lambda-build

[tool.poetry-plugin-lambda-build]
artifact_path = "package.zip"

poetry self add poetry-plugin-lambda-build
poetry self add poetry-plugin-export
poetry build-lambda

/Users/gtopcu/.bash_profile
/Users/gtopcu/.zshrc
/Library/Frameworks/Python.framework/Versions/3.11/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.11/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Users/gtopcu/.local/bin
/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Users/gtopcu/.local/bin:/opt/homebrew/bin/python3.12
/opt/homebrew/bin/python3.12
/usr/local/bin/python3
export PATH=".:$PATH:/opt/xyz/bin"
"python.defaultInterpreterPath": "/opt/homebrew/bin/python3.12",
source .venv/bin/activate
source "/Users/gtopcu/GoogleDrive/VSCode/aws-templates/.venv/bin/activate"

