
https://www.youtube.com/watch?v=NMQwzI9hprg - Step-by-Step Python Package Deployment with GitHub Actions(Poetry + PyPI)
https://github.com/squidfunk/mkdocs-material

python -m venv .venv
source .venv/bin/activate
source /Users/mac/GoogleDrive/VSCode/.venv/bin/activate
python select interpreter: /Users/gtopcu/My Drive/VSCode/.venv

#!/usr/bin/env python3
echo $PATH
export PATH=$PATH:/opt/homebrew/bin/python3.13
sudo apt update -y && sudo apt install python3 python3-pip python3-venv -y

  pip <command> [options]

  pip install \
    --platform manylinux2014_x86_64 \
    --target=<your_package_dir> \
    --implementation cp \
    --python-version 3.13 \
    --only-binary=:all: \
    --upgrade pydantic

  install                     Install packages.
  download                    Download packages.
  uninstall                   Uninstall packages.
  freeze                      Outputs installed packages in requirements format.
  inspect                     Inspect the python environment.
  list                        List installed packages.
  show                        Show information about installed packages.
  check                       Verify installed packages have compatible dependencies.
  config                      Manage local and global configuration.
  search                      Search PyPI for packages.
  cache                       Inspect and manage pip's wheel cache.
  index                       Inspect information available from package indexes.
  wheel                       Build wheels from your requirements.
  hash                        Compute hashes of package archives.
  completion                  A helper command used for command completion.
  debug                       Show information useful for debugging.
  help                        Show help for commands.

where | which python/pip
python --version
python3 -m venv .venv
source .venv/bin/activate

pip install requests
pip uninstall requests

pip list | freeze | show | search
pip freeze > requirements.txt
python -m pip install --upgrade pip
pip install -v python-dotenv -q -U 
pip3 install -r requirements.txt
pip install --no-cache-dir --no-input --upgrade -r requirements.txt
pip install -r requirements-prod.txt -t dist
pip install -r ./requirements.txt -t ./layers/python/lib/python3.11/site-packages/
pip install . (must have 'setup.py' or 'pyproject.toml')
pip install . -e
pip install package.whl
pip install package.tar.gz

pip install SimpleCV==1.2
pip install SimpleCV==1.*
pip install SimpleCV>=1.2.0
pip install SimpleCV<=1.2.0

pip install requests
pip install pytest
pip install boto3
pip install botocore
pip install ruff
pip install aws_lambda_powertools
pip install requests-aws4auth

----------------------------------------------------------------------------------------------------------------

# https://stackoverflow.com/questions/15031694/installing-python-packages-from-local-file-system-folder-to-virtualenv-with-pip

pip install -v -q  -U -r <requirements.txt> -t <dir> --root <dir> -i <url>(default https://pypi.org/simple)
  --dry-run --no-deps --force-reinstall --require-virtualenv --isolated --no-input --no-cache-dir 
  --disable-pip-version-check --no-clean --compile --no-compile --timeout <sec> --log <path>

pip install . -e --src <target_dir>
pip install package.whl
pip install package.tar.gz
pip install package --no-index --find-links file:///vscode/package
pip install -i https://test.pypi.org/simple/ test-repo-gtopcu

pip install -e .      
pip install -e /pkg -> Top-level directory where 'setup.py' can be found.

----------------------------------------------------------------------------------------------------------------
safety - https://docs.safetycli.com/safety-docs/safety-cli/quick-start-guide
----------------------------------------------------------------------------------------------------------------
pip install safety
safety auth login --headless | logout
safety check-updates
safety scan --detailed-output --apply-fixes --debug --stage dev --key API_KEY
safety scan -r requirements.txt | requirements.in | pyproject.toml
safety validate | generate policy_file 

----------------------------------------------------------------------------------------------------------------
pylint
----------------------------------------------------------------------------------------------------------------
pip install pylint
pylint myfile.py    # pylint: disable=all disable=invalid-name disable=missing-class-docstring
pytlint .
pylint --rcfile=.pylintrc .

----------------------------------------------------------------------------------------------------------------
flake8
----------------------------------------------------------------------------------------------------------------
pip install flake8
flake8 . --config=.flake8

----------------------------------------------------------------------------------------------------------------
pyright
----------------------------------------------------------------------------------------------------------------
https://github.com/RobertCraigie/pyright-python
pip install pyright
pyright . --verbose
pyright --verbose --level warning --warnings -p pyrightconfig.json -v <venvpath> --outputjson 

[tool.pyright]
include = ["src", "tests"] 
exclude = [".venv"]
typeCheckingMode = "basic"
pythonVersion = "3.13"
venvPath = "."
venv = ".venv"

https://github.com/jakebailey/pyright-action
- name: Run Pyright
  uses: jakebailey/pyright-action@v2
  with:
    level: warning
#   version: 2.3.2
#   python-version: '3.13'

----------------------------------------------------------------------------------------------------------------
pip-tools
----------------------------------------------------------------------------------------------------------------
pip install pip-tools
pip-compile requirements.in -> Compiles requirements.txt from requirements.in pyproject.toml setup.cfg or setup.py
pip-compile -o requirements.txt requirements.in 
pip-sync requirements.txt --ask -> Sync virtual environment with requirements.txt

----------------------------------------------------------------------------------------------------------------
pipenv
----------------------------------------------------------------------------------------------------------------
pipenv -v -q --where --venv --py --envs --rm(virtual env) --clear(pipenv&pip caches)
pipenv check            -> Checks for PyUp Safety vulnerabilities and against PEP 508 markers provided in Pipfile

pipenv --python 3.13    -> Create a new project using Python 3.13
pipenv install          -> Installs all packages from Pipfile
pipenv install --dev    -> Install all dependencies for a project including dev
pipenv install -e .     -> Install a local setup.py into your virtual environment/Pipfile:
pipenv install boto3    -> Installs provided packages and adds them to Pipfile 
pipenv uninstall boto3  -> Uninstalls a provided package and removes it from Pipfile.
pipenv lock             -> Generates Pipfile.lock
pipenv lock --pre       -> Create a lockfile containing pre-releases
pipenv clean            -> Uninstalls all packages not specified in Pipfile.lock
pipenv sync             -> Installs all packages specified in Pipfile.lock
pipenv update           -> Runs lock, then sync
pipenv upgrade          -> Resolves provided packages and adds them to Pipfile, or (if no packages are given), 
                           merges results to Pipfile.lock
pipenv graph            -> Show a graph of your installed dependencies
pipenv run pip freeze   -> Use a lower-level pip command
pipenv shell            -> Spawns a shell within the virtualenv

----------------------------------------------------------------------------------------------------------------
uv
----------------------------------------------------------------------------------------------------------------
https://docs.astral.sh/uv/
curl -LsSf https://astral.sh/uv/install.sh | shX
brew install uv
pip install uv

uv --version -v -q --no-cache
uv init myproject
uv venv --python 3.13
uv add ruff 
uv add --script example.py
uv remove ruff
uv sync
uv lock
uv export
uv tree
uv tool
uv python install 3.13 3.12
uv python pin pypy@3.13
uv pip
uv build
uv publish

uv run ruff check --fix
uv tool run/uvx pycowsay 'hello world!'
uv tool install ruff
ruff --version
uv pip compile requirements.in --universal --output-file requirements.txt
uv pip sync requirements.txt

----------------------------------------------------------------------------------------------------------------
POETRY
----------------------------------------------------------------------------------------------------------------
# https://www.youtube.com/watch?v=Ji2XDxmXSOM

curl -sSL https://install.python-poetry.org | python3 -
poetry --version
pip install --upgrade poetry poetry-plugin-export
poetry config virtualenvs.in-project true
poetry new myproject (for existing projects: poetry init -> creates pyproject.toml + poetry.lock)
poetry install (if pyproject.toml exists, creates venv) --no-root | --sync | --no-interaction
poetry env info -p
poetry env list
poetry env remove {env}
poetry env use {pythonInstallationDir}
poetry shell | exit -> deactivate / activate
poetry run (runs from env)
poetry lock (locks dependencies in pyproject.toml)
poetry add --group dev "aws-lambda-powertools[aws-sdk]"
poetry add -G dev boto3 botocore
poetry add requests
poetry add requests@2.31.0  -> exact version 2.31.0
poetry add requests^2.31.0  -> latest minor version: 2.x.x  (caret) - poetry default
poetry add requests~2.31.0  -> latest patch version: 2.31.x (tilda)
poetry update -v | <requests>
poetry remove requests
poetry show --tree | --all | --nocache
poetry check
poetry build (builds /dist with .whl & .tar.gz)
poetry publish --build (Build and publish in one command)
poetry version major | minor | patch -> update project version in pyproject.toml
poetry export -vvv --with dev --without-hashes -o requirements-dev.txt
poetry export -vvv --without-hashes -o requirements.txt
poetry export (--only|--with|--without dev) --without-hashes -f requirements.txt -o requirements.txt
                                            --without-urls --extras=[extras] --no-cache

https://aws.plainenglish.io/streamline-lambda-development-with-poetry-25fbc212a846
https://github.com/micmurawski/poetry-plugin-lambda-build

[tool.poetry-plugin-lambda-build]
artifact_path = "package.zip"

poetry self add poetry-plugin-lambda-build
poetry self add poetry-plugin-export
poetry build-lambda

/Users/gtopcu/.bash_profile
/Users/gtopcu/.zshrc
/Library/Frameworks/Python.framework/Versions/3.11/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.11/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Users/gtopcu/.local/bin
/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Users/gtopcu/.local/bin:/opt/homebrew/bin/python3.12
/opt/homebrew/bin/python3.12
/usr/local/bin/python3
"python.defaultInterpreterPath": "/opt/homebrew/bin/python3.12",
