
https://www.youtube.com/watch?v=NMQwzI9hprg - Step-by-Step Python Package Deployment with GitHub Actions(Poetry + PyPI)
https://github.com/squidfunk/mkdocs-material

pip -V

python -m venv .venv
source .venv/bin/activate
source /Users/mac/GoogleDrive/VSCode/.venv/bin/activate

Python: Select Interpreter -> Command + Shift + P
/Users/gtopcu/My Drive/VSCode/.venv 

Windows 
c:\users\dell\appdata\roaming\python\python313\site-packages\
C:\Program Files\Python313\libs> 
C:\Program Files\Python313\Lib> 
Powershell terminal:
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
.\Activate.ps1
deactivate

#!/usr/bin/env python3
echo $PATH
export PATH=$PATH:/opt/homebrew/bin/python3.13
sudo apt update -y && sudo apt install python3 python3-pip python3-venv -y
import os; print(os.getenv("PYTHONPATH"))
sys.path.append()

  pip <command> [options]

  pip install \
    --platform manylinux2014_x86_64 \
    --target=<your_package_dir> \
    --implementation cp \
    --python-version 3.13 \
    --only-binary=:all: \
    --upgrade pydantic

  install                     Install packages.
  download                    Download packages.
  uninstall                   Uninstall packages.
  freeze                      Outputs installed packages in requirements format.
  inspect                     Inspect the python environment.
  list                        List installed packages.
  show                        Show information about installed packages.
  check                       Verify installed packages have compatible dependencies.
  config                      Manage local and global configuration.
  search                      Search PyPI for packages.
  cache                       Inspect and manage pip's wheel cache.
  index                       Inspect information available from package indexes.
  wheel                       Build wheels from your requirements.
  hash                        Compute hashes of package archives.
  completion                  A helper command used for command completion.
  debug                       Show information useful for debugging.
  help                        Show help for commands.

where | which python/pip
python --version
python3 -m venv .venv
source .venv/bin/activate

pip -V -v -q --no-input --no-cache-dir --disable-pip-version-check --log <path> --timeout <sec>
pip install | download | uninstall | freeze | inspect | list | show | check | config | search | cache | index | wheel | hash
pip freeze > requirements.txt

python -m pip install --upgrade pip
pip install -v -q  -U -r <requirements.txt> -t <dir> --root <dir> -i <url>(default https://pypi.org/simple)
  --dry-run --no-deps --force-reinstall --require-virtualenv --isolated --no-input --no-cache-dir 
  --disable-pip-version-check --no-clean --compile --no-compile --timeout <sec> --log <path>
pip install -v -U python-dotenv 
pip install . -e --src <target_dir>
pip install requests
pip uninstall requests
pip install -r requirements.txt -t dist --no-cache-dir --no-input --upgrade 
pip install -r requirements.txt -t .venv/python/lib/python3.13/site-packages/

pip install git+https://github.com/sdispater/pendulum.git#develop -> Remote GIT repo
pip install git+ssh://github.com/sdispater/pendulum.git#develop   -> Remote GIT repo with ssh
pip install git+file:///my_local_repo/mypackage                   -> Local GIT repo 

pip install -i https://test.pypi.org/simple/ test-repo-gtopcu

pip install SimpleCV==1.2.0
pip install SimpleCV==1.*
pip install SimpleCV>=1.2.0
pip install SimpleCV<=1.2.0

pip install requests
pip install requests-aws4auth
pip install pytest
pip install boto3
pip install botocore
pip install ruff
pip install "aws-lambda-powertools[aws-sdk]"

python -m build -v --sdist --wheel --outdir <PATH> /src (default sdist + wheel)

https://www.tldrlegal.com/
pip install twine
twine --version
twine register [-h] [-r REPOSITORY] [--repository-url REPOSITORY_URL] [--attestations] [-s]
                    [--sign-with SIGN_WITH] [-i IDENTITY] [-u USERNAME] [-p PASSWORD] [--non-interactive]
                    [-c COMMENT] [--config-file CONFIG_FILE] [--skip-existing] [--cert path] [--client-cert path]
                    [--verbose] [--disable-progress-bar]
twine check --strict
twine upload -r testpypi dist/*
twine upload dist/*

----------------------------------------------------------------------------------------------------------------

# https://stackoverflow.com/questions/15031694/installing-python-packages-from-local-file-system-folder-to-virtualenv-with-pip

pip install package.whl
pip install package.tar.gz
pip install package --no-index --find-links /package

pip install .           (must have 'setup.py' or 'pyproject.toml')
pip install . -e        (must have 'setup.py' or 'pyproject.toml')
pip install -e /pkg     (must have 'setup.py' or 'pyproject.toml')
pip install . -e --src <target_dir>

setup.py (legacy)
pip install setuptools
pip install wheel
python setup.py bdist_wheel   -> /dist/package.whl (binary compiled distribution)
python setup.py sdist         -> /dist/package.tar.gz (includes source code, setup.py)

----------------------------------------------------------------------------------------------------------------
safety - https://docs.safetycli.com/safety-docs/safety-cli/quick-start-guide
----------------------------------------------------------------------------------------------------------------
pip install safety
safety auth login --headless | logout
safety check-updates
safety scan --detailed-output --apply-fixes --debug --stage dev --key API_KEY
safety scan -r requirements.txt |Â requirements.in | pyproject.toml
safety validate | generate policy_file 

----------------------------------------------------------------------------------------------------------------
pylint
----------------------------------------------------------------------------------------------------------------
pip install pylint
pylint myfile.py    # pylint: disable=all disable=invalid-name disable=missing-class-docstring
pytlint .
pylint --rcfile=.pylintrc .

----------------------------------------------------------------------------------------------------------------
flake8
----------------------------------------------------------------------------------------------------------------
pip install flake8
flake8 . --config=.flake8

----------------------------------------------------------------------------------------------------------------
pyright
----------------------------------------------------------------------------------------------------------------
https://github.com/RobertCraigie/pyright-python
pip install pyright
pyright . --verbose
pyright --verbose --level warning --warnings -p pyrightconfig.json -v <venvpath> --outputjson 

[tool.pyright]
include = ["src", "tests"] 
exclude = [".venv"]
typeCheckingMode = "basic"
pythonVersion = "3.13"
venvPath = "."
venv = ".venv"

https://github.com/jakebailey/pyright-action
- name: Run Pyright
  uses: jakebailey/pyright-action@v2
  with:
    level: warning
#   version: 2.3.2
#   python-version: '3.13'

----------------------------------------------------------------------------------------------------------------
pip-tools
----------------------------------------------------------------------------------------------------------------
pip install pip-tools
pip-compile requirements.in -> Compiles requirements.txt from requirements.in pyproject.toml setup.cfg or setup.py
pip-compile -o requirements.txt requirements.in 
pip-sync requirements.txt --ask -> Sync virtual environment with requirements.txt

----------------------------------------------------------------------------------------------------------------
pipenv
----------------------------------------------------------------------------------------------------------------
pipenv -v -q --where --venv --py --envs --rm(virtual env) --clear(pipenv&pip caches)
pipenv check            -> Checks for PyUp Safety vulnerabilities and against PEP 508 markers provided in Pipfile

pipenv --python 3.13    -> Create a new project using Python 3.13
pipenv install          -> Installs all packages from Pipfile
pipenv install --dev    -> Install all dependencies for a project including dev
pipenv install -e .     -> Install a local setup.py into your virtual environment/Pipfile:
pipenv install boto3    -> Installs provided packages and adds them to Pipfile 
pipenv uninstall boto3  -> Uninstalls a provided package and removes it from Pipfile.
pipenv lock             -> Generates Pipfile.lock
pipenv lock --pre       -> Create a lockfile containing pre-releases
pipenv clean            -> Uninstalls all packages not specified in Pipfile.lock
pipenv sync             -> Installs all packages specified in Pipfile.lock
pipenv update           -> Runs lock, then sync
pipenv upgrade          -> Resolves provided packages and adds them to Pipfile, or (if no packages are given), 
                           merges results to Pipfile.lock
pipenv graph            -> Show a graph of your installed dependencies
pipenv run pip freeze   -> Use a lower-level pip command
pipenv shell            -> Spawns a shell within the virtualenv

----------------------------------------------------------------------------------------------------------------
uv
----------------------------------------------------------------------------------------------------------------
https://docs.astral.sh/uv/
https://github.com/astral-sh/uv-pre-commit
https://www.youtube.com/watch?v=qh98qOND6MI
https://www.youtube.com/watch?v=xhg1dJHLqSM

curl -LsSf https://astral.sh/uv/install.sh | shX
brew install uv
pip install uv
eval "$(uv generate-shell-completion zsh)"

uv --version -v -q --no-cache
https://docs.astral.sh/uv/concepts/projects/init/
uv init myapp --app(default) --lib --package
uv init myapp --no-workspace (can init in an existing project -> will be embedded with shared lock file)
uv venv --python 3.13
uv add -U -v -q --editable --nosync --reinstall --find-links --no-index --default-index <https://pypi.org/simple>
uv add -r requirements.txt
uv add --dev ruff 
uv add --group dev ruff 
uv add --package mypackage  -> Add the dependency to a specific package in the workspace
uv add --script example.py  -> Add the dependency to the specified Python script, rather than to a project
uv remove ruff
uv sync -U
uv tree
uv lock
uv export -U -p <python_ver> --no-python-downloads --no-cache --refresh --all-packages --all-extras 
uv export --no-dev --only-dev --group dev --nogroup dev --only-group dev --all-groups 
          --no-hashes --no-header --no-editible 
uv export --no-dev --no-hashes --no-header --output-file requirements.txt
uv export --no-hashes --no-header --output-file requirements.txt
https://docs.astral.sh/uv/pip/compile/#locking-requirements
uv pip compile pyproject.toml -o requirements.txt
uv pip compile pyproject.toml requirements-dev.in -o requirements-dev.txt
uv pip compile requirements.in --universal --output-file requirements.txt
uv pip sync requirements.txt
uv pip install wheel

uv python list
uv python install 3.13.0
uv python install '>=3.13.2,<3.14.0'
uv python pin pypy@3.13

uv tool dir                   -> Temp tool installation dir (/Users/mac/.local/share/uv/tools)
uv tool update-shell
uv tool run ruff check --fix  -> Auto-installs the tool
uvx ruff check --fix (short)
uv tool install ruff
uv tool upgrade ruff
uv tool uninstall ruff

uv run ruff check --fix     -> runs in current env"
uv run hello.py             -> runs in current env"

uv build
uv publish --password=xxx

for publishing, need to add a build system to pyproject.toml:
[build-system]
requires=["hatchling"]
build-backend="hatchling.build"

# https://docs.astral.sh/uv/pip/dependencies/#using-pyprojecttoml
# uv add aws-lambda-powertools
# uv add --dev aws-lambda-powertools --extra aws-sdk

[project.optional-dependencies]
cli = [
  "rich",
  "click",
]
---------------------------------------------------------------------------------------------------------------
POETRY
---------------------------------------------------------------------------------------------------------------
# https://www.youtube.com/watch?v=Ji2XDxmXSOM

curl -sSL https://install.python-poetry.org | python3 -
poetry --version
pip install --upgrade poetry poetry-plugin-export
poetry config virtualenvs.in-project true
poetry new myproject  
poetry init           -> (for existing projects. creates pyproject.toml + poetry.lock)
poetry install        -> (if pyproject.toml exists, creates venv) --no-root | --sync | --no-interaction
poetry env info -p
poetry env list
poetry env remove {env}
poetry env use {pythonInstallationDir}
poetry shell | exit -> deactivate / activate
poetry run (runs from env)
poetry lock (locks dependencies in pyproject.toml)

https://python-poetry.org/docs/cli/#options-4
poetry add --group dev "aws-lambda-powertools[aws-sdk]"
poetry add -G dev boto3 botocore
poetry add requests --dry-run -e 

poetry add pendulum==2.0.5    -> Allow only 2.0.5 version
poetry add pendulum@^2.0.5    -> Allow >=2.0.5, <3.0.0 versions - latest minor version: 2.x.x  (caret) - default
poetry add pendulum@~2.0.5    -> Allow >=2.0.5, <2.1.0 versions - latest patch version: 2.31.x (tilda)
poetry add "pendulum>=2.0.5"  -> Allow >=2.0.5 versions, without upper bound
poetry add pendulum@latest    -> Get the latest version of an already present dependency

poetry add git+https://github.com/sdispater/pendulum.git
poetry add git+https://github.com/sdispater/pendulum.git#develop
poetry add git+https://github.com/sdispater/pendulum.git#2.0.5
poetry add git+https://github.com/myorg/mypackage_with_subdirs.git@main#subdirectory=subdir 

poetry add git+ssh://git@github.com/sdispater/pendulum.git
poetry add git+ssh://git@github.com:sdispater/pendulum.git#develop
poetry add git+ssh://git@github.com:sdispater/pendulum.git#2.0.5
poetry add git+ssh://git@github.com:sdispater/pendulum.git

poetry add ./my-package/ --editable  -> or in pyproject.yaml: my-package = {path = "../path", develop = true}
poetry add ../my-package/dist/my-package-0.1.0.tar.gz
poetry add ../my-package/dist/my_package-0.1.0.whl

poetry update -v |Â <requests>
poetry update --with dev --no-cache --no-interaction 
poetry remove requests
poetry show --tree | --all | --nocache
poetry check
poetry build --format wheel | sdist --output dist (.whl & .tar.gz)
poetry publish --build --repository <pypi> --username <username> --password <password> --dry-run --dist-dir dist

poetry version major | minor | patch -> update project version in pyproject.toml
poetry export -vvv --with dev --without-hashes -o requirements-dev.txt
poetry export -vvv --without-hashes -o requirements.txt
poetry export (--only|--with|--without dev) --without-hashes -f requirements.txt -o requirements.txt
                                            --without-urls --extras=[extras] --no-cache

https://aws.plainenglish.io/streamline-lambda-development-with-poetry-25fbc212a846
https://github.com/micmurawski/poetry-plugin-lambda-build

[tool.poetry-plugin-lambda-build]
artifact_path = "package.zip"

poetry self add poetry-plugin-lambda-build
poetry self add poetry-plugin-export
poetry build-lambda

/Users/gtopcu/.bash_profile
/Users/gtopcu/.zshrc
/Library/Frameworks/Python.framework/Versions/3.11/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.11/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Users/gtopcu/.local/bin
/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Users/gtopcu/.local/bin:/opt/homebrew/bin/python3.12
/opt/homebrew/bin/python3.12
/usr/local/bin/python3
"python.defaultInterpreterPath": "/opt/homebrew/bin/python3.12",


---------------------------------------------------------------------------------------------------------------
Profiling
https://ohadravid.github.io/posts/2023-03-rusty-python/
---------------------------------------------------------------------------------------------------------------

cProfile -h

pip install py-spy
py-spy record --native -o profile.svg -- python measure.py
profile.svg -> FlameGraph