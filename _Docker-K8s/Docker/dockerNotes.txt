
https://hub.docker.com/
https://docs.docker.com/
https://labs.play-with-docker.com/
https://www.youtube.com/watch?v=bKFMS5C4CG0
https://devtron.ai/blog/cmd-and-entrypoint-differences/

/usr/local/bin.
$HOME/.docker/bin
brew update && brew upgrade --cask docker.

Uninstall on Mac:
sudo /Applications/Docker.app/Contents/MacOS/uninstall
sudo rm -rf ~/Library/Group\ Containers/group.com.docker
sudo rm -rf ~/Library/Containers/com.docker.docker
sudo rm -rf ~/.docker

----------------------------------------------------------------------------------------------------------------

Ubuntu: 140MB

python(Full) - FROM python:3.13
Largest size (~900MB)
Contains all standard utilities and development tools
Good for development, testing, and complex build requirements
Example: 

python-slim - FROM python:3.13-slim
Medium size (~180MB)
Minimal packages needed to run Python
Good balance between size and functionality
Best for production when you need some system packages

python-alpine - FROM python:3.13-alpine
Smallest size (~45MB)
Based on Alpine Linux
Very minimal, lacks many standard libraries
Best for minimal production images
Can be tricky with packages requiring compilation

python-bullseye(Debian 11) - FROM python:3.13-bullseye
Similar size to full image
Based on Debian Bullseye
Stable Debian release with long-term support
Good for stability and security updates

python-buster(Debian 10) - FROM python:3.13-buster
Older Debian version
Similar to bullseye but older

Recommendation:
Development: Use python (full)
Production: Start with python-slim, use alpine if size is critical
Need stability: Use bullseye or buster

----------------------------------------------------------------------------------------------------------------

.dockerignore
# .env
.DS_Store
.git
.venv
venv
pytest_cache
...

https://stackoverflow.com/questions/21553353/what-is-the-difference-between-cmd-and-entrypoint-in-a-dockerfile
https://www.linkedin.com/posts/kaanyagci_your-dockerfiles-are-broken-because-you-activity-7324362845968637952-hlcF/

Dockerfile should specify at least one of CMD or ENTRYPOINT commands
ENTRYPOINT should be defined when using the container as an executable
CMD should be used as default arguments for an ENTRYPOINT or for executing an ad-hoc command in a container
CMD is not a command - It’s just the default argument passed to ENTRYPOINT
CMD will be overridden when running the container with alternative arguments
If you don’t define an ENTRYPOINT, Docker decides how to run your CMD based on its format
Use --entrypoint to override ENTRYPOINT

FROM ubuntu
CMD ["python", "app․py"]        -> exec python app․py (exec form)
CMD python app․py               -> sh -c "python app․py"(shell form)  
ENTRYPOINT ["python", "app․py"] -> python app.py echo "hello" (exec form)
ENTRYPOINT python app․py        -> (shell form)  

But here’s where most developers screw up
If you only define a CMD, you’re handing full control to the docker run user. Say your Dockerfile has:

CMD ["python", "server․py"]

Now someone runs:

docker run my-image echo "hello"

No Python. No server․py. Congrats. You just shipped a useless container. 
Now try this instead:

ENTRYPOINT ["python", "app.py"]
-> python app.py echo "hello"

The app runs, user’s args get passed cleanly

----------------------------------------------------------------------------------------------------------------

ADD vs COPY: Add supports remote URLs, uncompresseses tar, gzip etc

Top 8 Docker Best Practices for using Docker in Production
https://www.youtube.com/watch?v=8vXoMqWgbQQ

sudo apt install docker.io -y

docker info
docker --version
docker ps
docker image ls
docker history myApp:10

docker run -it ubuntu bash
docker run -it python:3.13-slim bash
docker run -it --entrypoint /bin/bash
docker exec -it container_name /bin/bash
docker attach container_name

docker build -t container_name .
docker run --name container_name -dp 80:80
docker run --rm --it --name container_name
docker run --name container_name -e GROUP_ID=1 
docker run --name local-db --env-file ./.env -dp 5432:5432 postgres:latest

docker build --platform=linux/x86_64 -t my_container .
docker run --rm -v ./.build:/opt my_container

docker run -d --name container_name -v named-volume:/data ubuntu
docker run --name container_name -v mysql-data:/var/lib/mysql/data -> named volume
docker run --name container_name -v /home/mount/data:/var/lib/mysql/data -> host volume
docker run --name container_name -v /var/lib/mysql/data -> anonymous volumes ie. /var/lib/docker/volumes/random-hash/_data auto created on host
docker run -d --name wordpress --mount source=sample-volume,target=/var/www/html wordpress

nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &
timeout 15 sh -c "until docker info; do echo .; sleep 1; done"

docker create -> create a container without starting it
doccker run -rm [image] -> create & start a container & remove after it stops
doccker run -it [image] -> create & start a container in interactive mode

docker start/stop/kill <the-container-id>
docker rm <the-container-id>
docker rm -f <the-container-id>
docker rm -f $(docker ps -a -q)   : Remove all containers
docker image rm -f <the-image-id>
docker builder prune -f -a        : Clear image cache

docker tag getting-started gtopcu/getting-started
docker push gtopcu/getting-started:tagname

docker login -u gtopcu
docker logout
docker scan getting-started
aws ecr get-login --no-include-email --region $AWS_REGION

docker exec -it <container-id> sh -c "python3 app.py"
docker exec <container-id> cat /data.txt
docker cp - Pull logs or dump files cleanly. No shell / side effects
docker update - Update CPU/memory live, without a restart. Contain a broken container that’s burning your node without killing it
docker logs -f
docker inspect
docker debug <container-id> --shell bash/zsh/fish -> https://www.linkedin.com/posts/kaanyagci_still-using-docker-exec-or-hacking-your-activity-7325491366703095808-GQPW
docker events --filter container=<container-id> --since 30m --until "2025-05-04T18:00:00" --format "{{.json}}" - Real-time event stream from the daemon
docker history myApp:10 - Inspect every layer of the image. Find the RUN that exploded the image size
docker diff <container> - See exactly what changed inside the container. Added, modified, and deleted files
docker top <container> - View running processes, no exec needed. Catch zombies, background jobs, and memory hogs
docker stats - Live resource usage: CPU, memory, I/O. Spot memory leaks or CPU spikes.
docker commit <container> debug:snapshot - Freeze current state into a new image. Something’s wrong in prod? Don’t rebuild. Freeze & bring it local & debug
docker save + docker load - Export and import full image, metadata intact. Pull a prod image locally for a deep inspection
docker export + docker import - Strip the container down to a raw filesystem, no history. Archive weird states, share minimal reproductions


Docker Volumes (-v bind mount, -mount regular mount)
https://refine.dev/blog/docker-volumes/#using-a-docker-volume
-------------------------------------------------------------------------------------------

VOLUME [ "/data" ]
docker volume -help
docker volume ls
docker volume ls -f dangling=true (list volumes not used by any container)
docker volume rm <volume>
docker volume inspect <volume>
docker volume prune
docker exec -it volumetest sh

docker volume create --name named-volume --driver local
docker run --name volumetest -it -dp 3000:3000 -v named-volume:/etc/myappdata alpine:latest

docker run -v /home/data:/app/data my-python-app:latest               # host_path:container_path
docker run -v /home/config/:/app/config:ro my-python-app:latest       # :ro for read-only, rw for read-write 
docker run -v /home/config.json:/app/config.json my-python-app:latest # single file
docker run -v v $(pwd):/app/workspace my-python-app:latest            # mount current dir

# Using Docker SDK for Python
import docker
def mount_with_docker_sdk():
    client = docker.from_env()
    container = client.containers.run(
        "my-python-app:latest",
        volumes={
            '/home/user/data': {'bind': '/app/data', 'mode': 'rw'},
            '/home/user/config.json': {'bind': '/app/config.json', 'mode': 'ro'},
        },
        detach=True
    )
    return container

VOLUME /app/data: Marks directories expected to contain externally mounted volumes 
                  Applied during image build - doesn't actually mount anything from the host during build time
                  If container is run without volume mapping, Docker automatically creates an anonymous volume
                  Data persists between container restarts but isn't accessible from host

-v flag           Actually connects host directories to container directories. 
                  Applied during container run
                  Maps host directories (data is accessible from both host and container)  

COPY /host/source /container/dest   # Copies files INTO image",
VOLUME /app/data                    # Declares mount point for runtime",
WORKDIR /app                        # Sets working directory inside container"

Why Dockerfile can't directly mount host directories:
  1. Build-time vs Runtime: Dockerfiles execute during image BUILD time, but host mounts need to happen at container RUN time
  2. Portability: Images should be portable across different hosts, but host paths are specific to each machine
  3. Security: Allowing arbitrary host access during build would be a significant security risk

Binding Mount Points:
docker run -dp 3000:3000 `
    -w /app -v "$(pwd):/app" `
    node:12-alpine `
    sh -c "yarn install && yarn run dev"



Networking
-----------------------------------------------------------------------------------------------
docker network ls
docker network rm <network_name>

1. Default networking is bridge if you don't specify anything

2. User-defined bridge network
docker network create todo-app-network 
docker run -d \
    --network todo-app-network --network-alias mysql \
    -v mysql-data:/var/lib/mysql \
    -e MYSQL_ROOT_PASSWORD=secret \
    -e MYSQL_DATABASE=todos \
    mysql:5.7
docker exec -it <mysql-container-id> mysql -p
mysql> SHOW DATABASES;

3. Use host networking:
docker run -itd -rm --network host --name stormbreaker nginx

docker run -it --network todo-app nicolaka/netshoot
dig mysql


---
Docker-Compose
docker-compose version
docker-compose up -d
docker-compose down
docker-compose logs -f

docker-compose.yml
version: "3.7"
services:
  app:
    image: node:12-alpine
    command: sh -c "yarn install && yarn run dev"
    ports:
      - 3000:3000
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: secret
      MYSQL_DB: todos

  mysql:
    image: mysql:5.7
    volumes:
      - todo-mysql-data:/var/lib/mysql
    environment: 
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: todos

volumes:
  todo-mysql-data:


