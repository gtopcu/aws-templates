
https://hub.docker.com/
https://docs.docker.com/
https://labs.play-with-docker.com/
https://www.youtube.com/watch?v=bKFMS5C4CG0
https://devtron.ai/blog/cmd-and-entrypoint-differences/

https://stackoverflow.com/questions/21553353/what-is-the-difference-between-cmd-and-entrypoint-in-a-dockerfile
Dockerfile should specify at least one of CMD or ENTRYPOINT commands.
ENTRYPOINT should be defined when using the container as an executable.
CMD should be used as a way of defining default arguments for an ENTRYPOINT command or for 
executing an ad-hoc command in a container.
CMD will be overridden when running the container with alternative arguments

ADD vs COPY: Add supports remote URLs, uncompresseses tar, gzip etc

FROM ubuntu
CMD ["echo", "Hello World"]
CMD echo "Hello World" (shell form)
CMD ["echo", "Hello World"] (exec form)
ENTRYPOINT echo "Hello World" (shell form)
ENTRYPOINT ["echo", "Hello World"] (exec form)

Top 8 Docker Best Practices for using Docker in Production
https://www.youtube.com/watch?v=8vXoMqWgbQQ

sudo apt install docker.io -y

docker --version
docker ps
docker image ls
docker history myApp:10

docker build -t container_name .
docker run --name container_name
docker run -dp 80:80 container_name

docker run -d --name container_name -v named-volume:/data ubuntu
docker run --name container_name -v mysql-data:/var/lib/mysql/data -> named volume
docker run --name container_name -v /home/mount/data:/var/lib/mysql/data -> host volume
docker run --name container_name -v /var/lib/mysql/data -> anonymous volumes ie. /var/lib/docker/volumes/random-hash/_data auto created on host
docker run -d --name wordpress --mount source=sample-volume,target=/var/www/html wordpress

docker run --name local-db --env-file ./.env -dp 5432:5432 postgres:latest
docker run -it --entrypoint /bin/bash
docker exec -it container_name /bin/bash
docker attach container_name

nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &
timeout 15 sh -c "until docker info; do echo .; sleep 1; done"

docker create -> create a container without starting it
doccker run -rm [image] -> create & start a container & remove after it stops
doccker run -it [image] -> create & start a container in interactive mode

docker stop <the-container-id>
docker rm <the-container-id>
docker rm -f <the-container-id>
docker rm -f $(docker ps -a -q)   : Remove all containers
docker image rm -f <the-image-id>
docker builder prune -f -a        : Clear image cache

docker tag getting-started gtopcu/getting-started
docker push gtopcu/getting-started:tagname

aws ecr get-login --no-include-email --region $AWS_REGION

docker cp
docker start/stop/kill
docker exec -it <container-id> sh 
docker exec <container-id> cat /data.txt
docker logs -f
docker login -u gtopcu
docker logout
docker scan getting-started
docker image history

Docker Volumes (-v bind mount, -mount regular mount)
https://refine.dev/blog/docker-volumes/#using-a-docker-volume
docker volume create
docker volume create --name named-volume --driver local
docker run --name volumetest -itdp 3000:3000 -v named-volume:/etc/myappdata alpine
docker volume -help
docker volume ls
docker volume ls -f dangling=true (list volumes not used by any container)
docker volume rm <volume>
docker volume inspect <volume>

docker volume prune
docker exec -it volumetest sh

Binding Mount Points:
docker run -dp 3000:3000 `
    -w /app -v "$(pwd):/app" `
    node:12-alpine `
    sh -c "yarn install && yarn run dev"

Networking
docker network ls
docker network rm <network_name>

1. Default networking is bridge if you don't specify anything

2. User-defined bridge network
docker network create todo-app-network 
docker run -d \
    --network todo-app-network --network-alias mysql \
    -v mysql-data:/var/lib/mysql \
    -e MYSQL_ROOT_PASSWORD=secret \
    -e MYSQL_DATABASE=todos \
    mysql:5.7
docker exec -it <mysql-container-id> mysql -p
mysql> SHOW DATABASES;

3. Use host networking:
docker run -itd -rm --network host --name stormbreaker nginx

docker run -it --network todo-app nicolaka/netshoot
dig mysql


---
Docker-Compose
docker-compose version
docker-compose up -d
docker-compose down
docker-compose logs -f

docker-compose.yml
version: "3.7"
services:
  app:
    image: node:12-alpine
    command: sh -c "yarn install && yarn run dev"
    ports:
      - 3000:3000
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: secret
      MYSQL_DB: todos

  mysql:
    image: mysql:5.7
    volumes:
      - todo-mysql-data:/var/lib/mysql
    environment: 
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: todos

volumes:
  todo-mysql-data:


