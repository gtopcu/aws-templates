{
    "Comment": "A description of my state machine",
    "StartAt": "Parse Event Bridge Data",
    "States": {
      "Parse Event Bridge Data": {
        "Type": "Pass",
        "Next": "Update MeetingAnalysis Status To IN_PROGRESS",
        "Parameters": {
          "meetingAnalysisMediaObject": {
            "bucketName.$": "$.detail.bucket.name",
            "objectKey.$": "$.detail.object.key"
          },
          "meetingAnalysisID.$": "States.ArrayGetItem(States.StringSplit($.detail.object.key, '/'),States.MathAdd(States.ArrayLength(States.StringSplit($.detail.object.key, '/')),-1))"
        },
        "ResultPath": "$.meetingAnalysisInfo"
      },
      "Update MeetingAnalysis Status To IN_PROGRESS": {
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:updateItem",
        "Parameters": {
          "TableName": "Prod-CdkCorePlatformStack51FD4ACB-MeetingAnalysis54CA33EF-124DKLP75EZ12",
          "Key": {
            "id": {
              "S.$": "$.meetingAnalysisInfo.meetingAnalysisID"
            }
          },
          "UpdateExpression": "SET analysisStatus = :analysisStatus",
          "ExpressionAttributeValues": {
            ":analysisStatus": {
              "S": "ANALYSIS_IN_PROGRESS"
            }
          }
        },
        "ResultPath": null,
        "Next": "Guardrail Invoke"
      },
      "Guardrail Invoke": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$": "$.meetingAnalysisInfo.meetingAnalysisMediaObject",
          "FunctionName": "arn:aws:lambda:us-east-2:102224384400:function:Prod-CdkCoreMLPipelineSta-GuardrailsGuardrailsLamb-vAS0RsJLbVDb"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "Update MeetingAnalysis Duration",
        "ResultSelector": {
          "isValidAudioFile.$": "$.Payload.isValidAudioFile",
          "isValidVideoFile.$": "$.Payload.isValidVideoFile",
          "failureMessages.$": "$.Payload.failureMessages",
          "fileType.$": "$.Payload.fileType",
          "mediaDuration.$": "$.Payload.mediaDuration"
        },
        "ResultPath": "$.guardRailResult",
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Comment": "Guardrail Exceptions",
            "Next": "Handle Exception Messages",
            "ResultPath": "$.errors.GuardrailError"
          }
        ]
      },
      "Handle Exception Messages": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.errors.GuardrailError",
            "IsPresent": true,
            "Next": "StringToJson Guardrail Exception Cause"
          }
        ],
        "Default": "Update MeetingAnalysis Status To ERROR"
      },
      "StringToJson Guardrail Exception Cause": {
        "Type": "Pass",
        "Next": "Get Guardrail Exception Error Message",
        "ResultPath": "$.errors.GuardrailError",
        "Parameters": {
          "Error.$": "$.errors.GuardrailError.Error",
          "Cause.$": "States.StringToJson($.errors.GuardrailError.Cause)"
        }
      },
      "Get Guardrail Exception Error Message": {
        "Type": "Pass",
        "Next": "Update MeetingAnalysis Failure Message",
        "Parameters": {
          "errorMessage.$": "$.errors.GuardrailError.Cause.errorMessage"
        },
        "ResultPath": "$.failureMessages"
      },
      "Update MeetingAnalysis Failure Message": {
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:updateItem",
        "Parameters": {
          "TableName": "Prod-CdkCorePlatformStack51FD4ACB-MeetingAnalysis54CA33EF-124DKLP75EZ12",
          "Key": {
            "id": {
              "S.$": "$.meetingAnalysisInfo.meetingAnalysisID"
            }
          },
          "UpdateExpression": "SET failureMessage = :failureMessage",
          "ExpressionAttributeValues": {
            ":failureMessage": {
              "S.$": "$.failureMessages.errorMessage"
            }
          }
        },
        "ResultPath": null,
        "Next": "Update MeetingAnalysis Status To ERROR"
      },
      "Update MeetingAnalysis Duration": {
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:updateItem",
        "Parameters": {
          "TableName": "Prod-CdkCorePlatformStack51FD4ACB-MeetingAnalysis54CA33EF-124DKLP75EZ12",
          "Key": {
            "id": {
              "S.$": "$.meetingAnalysisInfo.meetingAnalysisID"
            }
          },
          "UpdateExpression": "SET meetingDuration = :meetingDuration",
          "ExpressionAttributeValues": {
            ":meetingDuration": {
              "N.$": "States.JsonToString($.guardRailResult.mediaDuration)"
            }
          }
        },
        "ResultPath": null,
        "Next": "Start ML Pipeline Choice"
      },
      "Start ML Pipeline Choice": {
        "Type": "Choice",
        "Choices": [
          {
            "Or": [
              {
                "Variable": "$.guardRailResult.isValidAudioFile",
                "IsNull": true
              },
              {
                "Variable": "$.guardRailResult.isValidAudioFile",
                "BooleanEquals": false
              }
            ],
            "Next": "Get Voice Invalid Error Message",
            "Comment": "voice invalid"
          }
        ],
        "Default": "Get Meeting Integration Info"
      },
      "Get Voice Invalid Error Message": {
        "Type": "Pass",
        "Next": "Update MeetingAnalysis Failure Message",
        "Parameters": {
          "errorMessage.$": "$.guardRailResult.failureMessages[0]"
        },
        "ResultPath": "$.failureMessages"
      },
      "Get Meeting Integration Info": {
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:getItem",
        "Parameters": {
          "TableName": "Prod-CdkCorePlatformStack51FD4ACB-MeetingAnalysis54CA33EF-124DKLP75EZ12",
          "Key": {
            "id": {
              "S.$": "$.meetingAnalysisInfo.meetingAnalysisID"
            }
          }
        },
        "Next": "Get Company Users",
        "ResultPath": "$.integrationInfo",
        "ResultSelector": {
          "integrationInfo.$": "$.Item.integrationMeetingInfo",
          "meetingOwnerID.$": "$.Item.ownerID",
          "meetingCompanyID.$": "$.Item.companyID"
        }
      },
      "Get Company Users": {
        "Type": "Task",
        "Next": "Fetch Integration Resource Check",
        "Parameters": {
          "TableName": "Prod-CdkCorePlatformStack51FD4ACB-User00B015A1-KEGP4Z5QC79J",
          "FilterExpression": "companyID = :companyID",
          "ExpressionAttributeValues": {
            ":companyID": {
              "S.$": "$.integrationInfo.meetingCompanyID.S"
            }
          }
        },
        "Resource": "arn:aws:states:::aws-sdk:dynamodb:scan",
        "ResultPath": "$.companyUsers"
      },
      "Fetch Integration Resource Check": {
        "Type": "Choice",
        "Choices": [
          {
            "Not": {
              "Variable": "$.integrationInfo.integrationInfo",
              "IsNull": true
            },
            "Next": "Fetch Integration Resources",
            "Comment": "Fetch Integration Resources"
          }
        ],
        "Default": "Add default integration resources"
      },
      "Fetch Integration Resources": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:us-east-2:102224384400:function:Prod-CdkCoreMLPipelineSta-MLPipelineStepFunctionIn-aQVcfE7Wxyak",
          "Payload": {
            "meetingAnalysisID.$": "$.meetingAnalysisInfo.meetingAnalysisID",
            "integrationInfo.$": "$.integrationInfo.integrationInfo",
            "meetingOwnerID.$": "$.integrationInfo.meetingOwnerID.S"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "Start Ml Pipeline",
        "ResultPath": "$.integrationInfo.resources",
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Comment": "All Errors",
            "Next": "Add default integration resources",
            "ResultPath": "$.errors.IntegrationResourcesFetchError"
          }
        ],
        "ResultSelector": {
          "audioInfo.$": "$.Payload.audioInfo",
          "transcriptInfo.$": "$.Payload.transcriptInfo",
          "perSpeakerAudioInfo.$": "$.Payload.perSpeakerAudioInfo",
          "participants.$": "$.Payload.participants",
          "speakerTimeline.$": "$.Payload.speakerTimeline"
        }
      },
      "Add default integration resources": {
        "Type": "Pass",
        "Next": "Start Ml Pipeline",
        "Result": {
          "audioInfo": null,
          "transcriptInfo": null,
          "perSpeakerAudioInfo": null,
          "speakerTimeline": null,
          "participants": null
        },
        "ResultPath": "$.integrationInfo.resources"
      },
      "Start Ml Pipeline": {
        "Type": "Parallel",
        "Next": "Start Multi Dependency Step Function",
        "Branches": [
          {
            "StartAt": "Start Face Pipeline Choice",
            "States": {
              "Start Face Pipeline Choice": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Or": [
                      {
                        "Variable": "$.guardRailResult.isValidVideoFile",
                        "IsNull": true
                      },
                      {
                        "Variable": "$.guardRailResult.isValidVideoFile",
                        "BooleanEquals": false
                      }
                    ],
                    "Next": "Face Pipeline Not Executed"
                  }
                ],
                "Default": "Start Face Step Function Execution"
              },
              "Start Face Step Function Execution": {
                "Type": "Task",
                "Resource": "arn:aws:states:::states:startExecution.sync:2",
                "Parameters": {
                  "StateMachineArn": "arn:aws:states:us-east-2:102224384400:stateMachine:MLPipelineStepFunctionFaceStepFunctionD10A8088-dC50CXUganaa",
                  "Input": {
                    "recordingId.$": "$.meetingAnalysisInfo.meetingAnalysisID",
                    "inputBucket.$": "$.detail.bucket.name",
                    "inputKey.$": "$.detail.object.key",
                    "outputBucket": "ml-outputs-dev",
                    "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                    "thumbnailInfo": {
                      "key.$": "States.Format('thumbnails/{}', $.meetingAnalysisInfo.meetingAnalysisID)",
                      "bucket": "prod-cdkcoreplatformstac-platformresourcesbucketf-1n0ugzne0lks9"
                    }
                  }
                },
                "ResultPath": "$.facePipelineResult",
                "Next": "Update MeetingAnalysis Thumbnail"
              },
              "Update MeetingAnalysis Thumbnail": {
                "Type": "Task",
                "Resource": "arn:aws:states:::dynamodb:updateItem",
                "Parameters": {
                  "TableName": "Prod-CdkCorePlatformStack51FD4ACB-MeetingAnalysis54CA33EF-124DKLP75EZ12",
                  "Key": {
                    "id": {
                      "S.$": "$.meetingAnalysisInfo.meetingAnalysisID"
                    }
                  },
                  "UpdateExpression": "SET thumbnail = :thumbnail",
                  "ExpressionAttributeValues": {
                    ":thumbnail": {
                      "M": {
                        "bucket": {
                          "S": "prod-cdkcoreplatformstac-platformresourcesbucketf-1n0ugzne0lks9"
                        },
                        "key": {
                          "S.$": "States.Format('thumbnails/{}', $.meetingAnalysisInfo.meetingAnalysisID)"
                        }
                      }
                    }
                  }
                },
                "ResultPath": null,
                "End": true
              },
              "Face Pipeline Not Executed": {
                "Type": "Pass",
                "End": true,
                "Result": {
                  "facePipelineResult": null
                }
              }
            }
          },
          {
            "StartAt": "Check for audio extraction",
            "States": {
              "Check for audio extraction": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.guardRailResult.fileType",
                    "StringMatches": "audio/*",
                    "Comment": "Media is audio",
                    "Next": "Add audio information"
                  },
                  {
                    "Not": {
                      "Variable": "$.integrationInfo.resources.audioInfo",
                      "IsNull": true
                    },
                    "Next": "Add integration audio information",
                    "Comment": "Get Integration Audio"
                  }
                ],
                "Default": "Extract audio"
              },
              "Add audio information": {
                "Type": "Pass",
                "ResultPath": "$.meetingAnalysisInfo.audioObject",
                "Next": "Generate Transcript Choice",
                "Parameters": {
                  "bucketName.$": "$.meetingAnalysisInfo.meetingAnalysisMediaObject.bucketName",
                  "objectKey.$": "$.meetingAnalysisInfo.meetingAnalysisMediaObject.objectKey"
                }
              },
              "Add integration audio information": {
                "Type": "Pass",
                "Next": "Generate Transcript Choice",
                "Parameters": {
                  "bucketName.$": "$.integrationInfo.resources.audioInfo.audioBucket",
                  "objectKey.$": "$.integrationInfo.resources.audioInfo.audioKey"
                },
                "ResultPath": "$.meetingAnalysisInfo.audioObject"
              },
              "Extract audio": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "arn:aws:lambda:us-east-2:102224384400:function:ffmpeg-test",
                  "Payload": {
                    "inputBucket.$": "$.meetingAnalysisInfo.meetingAnalysisMediaObject.bucketName",
                    "inputObjectKey.$": "$.meetingAnalysisInfo.meetingAnalysisMediaObject.objectKey",
                    "outputBucket": "ml-outputs-dev",
                    "outputObjectKey.$": "States.Format('{}/data_layer/{}_audio.wav',$.meetingAnalysisInfo.meetingAnalysisID ,$.meetingAnalysisInfo.meetingAnalysisID)"
                  }
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException",
                      "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "Generate Transcript Choice",
                "ResultSelector": {
                  "bucketName.$": "$.Payload.outputBucket",
                  "objectKey.$": "$.Payload.outputObjectKey"
                },
                "ResultPath": "$.meetingAnalysisInfo.audioObject"
              },
              "Generate Transcript Choice": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Not": {
                      "Variable": "$.integrationInfo.resources.transcriptInfo",
                      "IsNull": true
                    },
                    "Next": "Add integration transcript info",
                    "Comment": "Get Integration Transcript"
                  },
                  {
                    "Not": {
                      "Variable": "$.integrationInfo.resources.speakerTimeline",
                      "IsNull": true
                    },
                    "Next": "Spiky Transcription",
                    "Comment": "Start Spiky Transcription"
                  }
                ],
                "Default": "Start Transcription Job"
              },
              "Spiky Transcription": {
                "Type": "Task",
                "Resource": "arn:aws:states:::ecs:runTask.sync",
                "Parameters": {
                  "CapacityProviderStrategy": [
                    {
                      "CapacityProvider": "FARGATE_SPOT",
                      "Weight": 1
                    }
                  ],
                  "Cluster": "arn:aws:ecs:us-east-2:102224384400:cluster/ml-face-fargate-cluster-prod",
                  "TaskDefinition": "arn:aws:ecs:us-east-2:102224384400:task-definition/ml-transcriber-fargate:4",
                  "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                      "AssignPublicIp": "ENABLED",
                      "Subnets": [
                        "subnet-959bd4ef"
                      ]
                    }
                  },
                  "Overrides": {
                    "ContainerOverrides": [
                      {
                        "Environment": [
                          {
                            "Name": "AUDIO_INPUT_BUCKET",
                            "Value.$": "$.meetingAnalysisInfo.audioObject.bucketName"
                          },
                          {
                            "Name": "AUDIO_KEY",
                            "Value.$": "$.meetingAnalysisInfo.audioObject.objectKey"
                          },
                          {
                            "Name": "SPEAKER_INTERVALS_BUCKET",
                            "Value.$": "$.integrationInfo.resources.speakerTimeline.bucket"
                          },
                          {
                            "Name": "SPEAKER_INTERVALS_KEY",
                            "Value.$": "$.integrationInfo.resources.speakerTimeline.key"
                          },
                          {
                            "Name": "RECORDING_ID",
                            "Value.$": "$.meetingAnalysisInfo.meetingAnalysisID"
                          },
                          {
                            "Name": "OUTPUT_BUCKET",
                            "Value": "ml-outputs-dev"
                          },
                          {
                            "Name": "OUTPUT_KEY",
                            "Value.$": "States.Format('{}/data_layer/{}_transcript.csv', $.meetingAnalysisInfo.meetingAnalysisID, $.meetingAnalysisInfo.meetingAnalysisID)"
                          }
                        ],
                        "Name": "spiky-transcriber"
                      }
                    ]
                  }
                },
                "Next": "Name ID Matcher",
                "ResultPath": null,
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "BackoffRate": 2,
                    "IntervalSeconds": 150,
                    "MaxAttempts": 3
                  }
                ]
              },
              "Add integration transcript info": {
                "Type": "Pass",
                "Next": "Choose Transcript Parser Arn",
                "Parameters": {
                  "bucketName.$": "$.integrationInfo.resources.transcriptInfo.transcriptBucket",
                  "objectKey.$": "$.integrationInfo.resources.transcriptInfo.transcriptKey"
                },
                "ResultPath": "$.meetingAnalysisInfo.transcriptObject"
              },
              "Choose Transcript Parser Arn": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.integrationInfo.integrationInfo.M.integrationType.S",
                    "StringEquals": "WEBEX",
                    "Next": "Set transcript parser arn to Webex Parser"
                  },
                  {
                    "Variable": "$.integrationInfo.integrationInfo.M.integrationType.S",
                    "StringEquals": "MSTEAMS",
                    "Next": "Set transcript parser arn to MSTEAMS Parser"
                  }
                ],
                "Default": "Set transcript parser arn to AWS Parser"
              },
              "Set transcript parser arn to Webex Parser": {
                "Type": "Pass",
                "Result": "arn:aws:lambda:us-east-2:102224384400:function:Prod-CdkCoreMLPipelineSta-TranscriptProcessorWebex-MiDlEmRX1EF4",
                "ResultPath": "$.transcriptParserFunctionArn",
                "Next": "AWS Transcribe Processor"
              },
              "Set transcript parser arn to MSTEAMS Parser": {
                "Type": "Pass",
                "Result": "arn:aws:lambda:us-east-2:102224384400:function:Prod-CdkCoreMLPipelineSta-TranscriptProcessorMSTea-rAt5fJ6FxAfk",
                "ResultPath": "$.transcriptParserFunctionArn",
                "Next": "AWS Transcribe Processor"
              },
              "Start Transcription Job": {
                "Type": "Task",
                "Next": "Wait X Seconds",
                "Parameters": {
                  "Media": {
                    "MediaFileUri.$": "States.Format('s3://{}/{}', $.meetingAnalysisInfo.audioObject.bucketName, $.meetingAnalysisInfo.audioObject.objectKey)"
                  },
                  "TranscriptionJobName.$": "$.meetingAnalysisInfo.meetingAnalysisID",
                  "OutputBucketName": "ml-outputs-dev",
                  "OutputKey.$": "States.Format('aws_transcribe_results/{}.json', $.meetingAnalysisInfo.meetingAnalysisID)",
                  "LanguageCode": "en-US",
                  "Settings": {
                    "ShowSpeakerLabels": true,
                    "MaxSpeakerLabels": 10
                  }
                },
                "Resource": "arn:aws:states:::aws-sdk:transcribe:startTranscriptionJob",
                "ResultPath": "$.startTranscriptionJobResponse"
              },
              "Wait X Seconds": {
                "Type": "Wait",
                "Next": "Get Transcription Job",
                "Seconds": 30
              },
              "Get Transcription Job": {
                "Type": "Task",
                "Parameters": {
                  "TranscriptionJobName.$": "$.startTranscriptionJobResponse.TranscriptionJob.TranscriptionJobName"
                },
                "Resource": "arn:aws:states:::aws-sdk:transcribe:getTranscriptionJob",
                "Next": "Check Transcription Job Status",
                "ResultPath": "$.getTranscriptionJobResponse"
              },
              "Check Transcription Job Status": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.getTranscriptionJobResponse.TranscriptionJob.TranscriptionJobStatus",
                    "StringEquals": "FAILED",
                    "Comment": "job failed",
                    "Next": "Transcription Job Failed"
                  },
                  {
                    "Variable": "$.getTranscriptionJobResponse.TranscriptionJob.TranscriptionJobStatus",
                    "StringEquals": "COMPLETED",
                    "Comment": "job succeeded",
                    "Next": "Add transcript info"
                  }
                ],
                "Default": "Wait X Seconds"
              },
              "Add transcript info": {
                "Type": "Pass",
                "Next": "Set transcript parser arn to AWS Parser",
                "Parameters": {
                  "bucketName": "ml-outputs-dev",
                  "objectKey.$": "States.Format('aws_transcribe_results/{}.json', $.meetingAnalysisInfo.meetingAnalysisID)"
                },
                "ResultPath": "$.meetingAnalysisInfo.transcriptObject"
              },
              "Set transcript parser arn to AWS Parser": {
                "Type": "Pass",
                "Next": "AWS Transcribe Processor",
                "Result": "arn:aws:lambda:us-east-2:102224384400:function:Prod-CdkCoreMLPipelineSta-TranscriptProcessorAWSTr-wmmdhiW4ExSS",
                "ResultPath": "$.transcriptParserFunctionArn"
              },
              "AWS Transcribe Processor": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "Payload": {
                    "bucket.$": "$.meetingAnalysisInfo.transcriptObject.bucketName",
                    "transcript_key.$": "$.meetingAnalysisInfo.transcriptObject.objectKey",
                    "output_bucket": "ml-outputs-dev",
                    "output_key.$": "States.Format('{}/data_layer/{}_transcript.csv', $.meetingAnalysisInfo.meetingAnalysisID, $.meetingAnalysisInfo.meetingAnalysisID)"
                  },
                  "FunctionName.$": "$.transcriptParserFunctionArn"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException",
                      "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "Name ID Matcher",
                "ResultPath": null
              },
              "Name ID Matcher": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "arn:aws:lambda:us-east-2:102224384400:function:Prod-CdkCoreMLPipelineSta-TranscriptProcessorTrans-f0emyky3zh5c",
                  "Payload": {
                    "companyUsers.$": "$.companyUsers",
                    "participants.$": "$.integrationInfo.resources.participants",
                    "recordingId.$": "$.meetingAnalysisInfo.meetingAnalysisID",
                    "integrationInfo.$": "$.integrationInfo.integrationInfo",
                    "env": "dev"
                  }
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException",
                      "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "ID List Data Injector",
                "ResultPath": "$.transcriptIDMatcherLambdaResults"
              },
              "ID List Data Injector": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "arn:aws:lambda:us-east-2:102224384400:function:Prod-CdkCoreMLPipelineSta-MLPipelineStepFunctionML-TenRNcyVRm4q",
                  "Payload": {
                    "recordingID.$": "$.meetingAnalysisInfo.meetingAnalysisID",
                    "inputDataBucket.$": "$.transcriptIDMatcherLambdaResults.Payload.outputBucket",
                    "inputDataKey.$": "$.transcriptIDMatcherLambdaResults.Payload.outputKey",
                    "inputDataID.$": "$.transcriptIDMatcherLambdaResults.Payload.dataProcessorID"
                  }
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException",
                      "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "Start Voice Step Function Execution",
                "ResultPath": null
              },
              "Start Voice Step Function Execution": {
                "Type": "Task",
                "Resource": "arn:aws:states:::states:startExecution.sync:2",
                "Parameters": {
                  "StateMachineArn": "arn:aws:states:us-east-2:102224384400:stateMachine:MLPipelineStepFunctionVoiceStepFunction996A2DD1-kVpmgdr0LM2a",
                  "Input": {
                    "audioInputBucket.$": "$.meetingAnalysisInfo.audioObject.bucketName",
                    "audioInputKey.$": "$.meetingAnalysisInfo.audioObject.objectKey",
                    "speakerTimeline.$": "$.integrationInfo.resources.speakerTimeline",
                    "transcriptInputBucket": "ml-outputs-dev",
                    "transcriptInputKey.$": "States.Format('{}/data_layer/{}_transcript.csv', $.meetingAnalysisInfo.meetingAnalysisID, $.meetingAnalysisInfo.meetingAnalysisID)",
                    "recordingID.$": "$.meetingAnalysisInfo.meetingAnalysisID",
                    "recordingId.$": "$.meetingAnalysisInfo.meetingAnalysisID",
                    "env": "dev",
                    "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
                  }
                },
                "End": true
              },
              "Transcription Job Failed": {
                "Comment": "Placeholder for a state which handles the failure.",
                "Type": "Fail"
              }
            }
          }
        ],
        "ResultPath": "$.mlPipelineResult",
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "Update MeetingAnalysis Status To ERROR",
            "ResultPath": "$.errorReason"
          }
        ]
      },
      "Start Multi Dependency Step Function": {
        "Type": "Task",
        "Resource": "arn:aws:states:::states:startExecution.sync:2",
        "Parameters": {
          "StateMachineArn": "arn:aws:states:us-east-2:102224384400:stateMachine:MLPipelineStepFunctionMultiDependencyStepFunction8F8874F1-qkRawPRiOaDO",
          "Input": {
            "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
            "recordingID.$": "$.meetingAnalysisInfo.meetingAnalysisID",
            "recordingId.$": "$.meetingAnalysisInfo.meetingAnalysisID",
            "env": "dev"
          }
        },
        "Next": "Update MeetingAnalysis Status To READY",
        "ResultPath": null,
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "Update MeetingAnalysis Status To ERROR",
            "ResultPath": "$.errorReason"
          }
        ]
      },
      "Update MeetingAnalysis Status To READY": {
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:updateItem",
        "Parameters": {
          "TableName": "Prod-CdkCorePlatformStack51FD4ACB-MeetingAnalysis54CA33EF-124DKLP75EZ12",
          "Key": {
            "id": {
              "S.$": "$.meetingAnalysisInfo.meetingAnalysisID"
            }
          },
          "UpdateExpression": "SET analysisStatus = :analysisStatus",
          "ExpressionAttributeValues": {
            ":analysisStatus": {
              "S": "ANALYSIS_READY"
            }
          }
        },
        "ResultPath": null,
        "Next": "Success"
      },
      "Update MeetingAnalysis Status To ERROR": {
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:updateItem",
        "Parameters": {
          "TableName": "Prod-CdkCorePlatformStack51FD4ACB-MeetingAnalysis54CA33EF-124DKLP75EZ12",
          "Key": {
            "id": {
              "S.$": "$.meetingAnalysisInfo.meetingAnalysisID"
            }
          },
          "UpdateExpression": "SET analysisStatus = :analysisStatus",
          "ExpressionAttributeValues": {
            ":analysisStatus": {
              "S": "ANALYSIS_ERROR"
            }
          }
        },
        "ResultPath": null,
        "Next": "Send Error Message to Slack"
      },
      "Send Error Message to Slack": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:us-east-2:102224384400:function:Prod-CdkCoreMLPipelineSta-SlackNotificationSenderS-vUGpOhbatAUA",
          "Payload": {
            "stateMachineInput.$": "$",
            "executionId.$": "$$.Execution.Id",
            "stateMachineArn.$": "$$.StateMachine.Id"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException",
              "Lambda.Unknown",
              "ClientError"
            ],
            "IntervalSeconds": 300,
            "MaxAttempts": 15,
            "BackoffRate": 2
          }
        ],
        "ResultPath": null,
        "Next": "Fail"
      },
      "Fail": {
        "Type": "Fail"
      },
      "Success": {
        "Type": "Succeed"
      }
    }
  }