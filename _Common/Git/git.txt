
# https://medium.com/@jake.page91/the-guide-to-git-i-never-had-a89048d4703a

which git
git config --list
git config --global user.name "S. Gokhan Topcu"
git config --global user.email "gtopcu@gmail.com"

git config --global credential.helper cache
git config --global credential.helper 'store --file ~/.my-credentials'

.git-credentials
---


```
git init
git add README.md
git rm README.md
git commit -m "first commit"
git branch -M main
git checkout -b feature-branch-name
git switch branch
git remote add origin git@github.com:gtopcu/aws-templates.git
git remote add origin https://github.com/gtopcu/python_lambda
git fetch
git pull
git push -u origin main --force
git rebase upstream_branch
git reset --soft HEAD~X       # Change to the number after HEAD~ depending on the commits you want to squash
git cherry-pick <commit-hash> # Do this multiple times if multiple commits are wanted
git tag
git show abc123def456789 
git status
git log
git diff
```


# Clone a Repository
git clone <repository_url>

# Stage Changes for Commit
git add <file(s)>

# Commit Changes
git commit -m "Commit message"

# Push Changes to the Remote Repository
git push

# Force Push Changes (use with caution)
git push --force

# Reset Working Directory to Last Commit
git reset --hard

# Create a New Branch
git branch <branch_name>

# Switch to a Different Branch
git checkout <branch_name>

# Merge Changes from Another Branch
git merge <branch_name>

# Rebase Changes onto Another Branch (use with caution)
git rebase <base_branch>

# View Status of Working Directory
git status

# View Commit History
git log

# Undo Last Commit (use with caution)
git reset --soft HEAD^

# Discard Changes in Working Directory
git restore <file(s)>

# Retrieve Lost Commit References
git reflog

# Interactive Rebase to Rearrange Commits
git rebase --interactive HEAD~3



---

Configure SSH Keys for GitHub
https://docs.github.com/en/authentication/troubleshooting-ssh/error-permission-denied-publickey
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

!!! chown must be hukanege for public  & private key & config, not root!
!!! ~ install into /var/root for all users
# list all SSH keys
$ ls -al /Users/gtopcu/.ssh
# start the ssh-agent in the background
$ eval "$(ssh-agent -s)"
> Agent pid 59566
$ ssh-add -l -E sha256
> 2048 SHA256:274ffWxgaxq/tSINAykStUL7XWyRNcRTlcST1Ei7gBQ /Users/gtopcu/.ssh/id_rsa (RSA)

# if key value doesn't exist:
$ ssh-keygen -t ed25519 -C "gtopcu@gmail.com"
$ open /Users/gtopcu/.ssh/config

# if config doesn't exist:
$ touch /Users/gtopcu/.ssh/config
Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile /Users/gtopcu/.ssh/id_ed25519
$ ssh-add --apple-use-keychain /Users/gtopcu/.ssh/id_ed25519
$ ssh-add -K ~/.ssh/id_ed25519 (for older macs)

# Add new key to GitHub
# Copies the contents of the id_ed25519.pub file to your clipboard
$ pbcopy < /Users/gtopcu/.ssh/id_ed25519.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPenYHBDr7gp996CswqDf1mj6XuuRGo+Xn+F8dp9yv14 gtopcu@gmail.com

# Add key: https://github.com/settings/keys
```

---

git init
git status
git log
git diff
git add readme.txt
git add .
git commit -am "initial"
git checkout master / branch / b6d7c45539810e73dbaf4871b05ca2c8c4440a60
git branch -a
git branch featureBranch
git branch -l
git branch -d featureBranch
git switch -c bugFixBranch
git merge featureBranch

git clone https://github.com/hukanege.git
git remote add <name><url>
git remote add origin https://github.com/gtopcu/python_lambda
git branch --set-upstream-to=origin/main
git push --set-upstream origin main --force
git push -u origin main
git fetch <remote><branch> (download only, do not merge) 
git pull <remote><branch> (fetch + merge)
git fork
git pull-request
git reset --soft/mixed/hard
git rebase

---

Ignoring files
https://www.atlassian.com/git/tutorials/saving-changes/gitignore#git-ignore-patterns
git rm --cached debug.log

Enforcing commit message/format
https://code-maven.com/enforcing-commit-message-format-in-git
