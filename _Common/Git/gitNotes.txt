
# https://medium.com/@jake.page91/the-guide-to-git-i-never-had-a89048d4703a

which git
git config --list
git config --global user.name "S. Gokhan Topcu"
git config --global user.email "gtopcu@gmail.com"

git config --global credential.helper cache
git config --global credential.helper 'store --file ~/.my-credentials'

.git-credentials
---

Git Fetch
- Downloads remote content but doesn't integrate it into your working files
- Updates your remote-tracking branches (like origin/main)
- Doesn't change your local working branch
- Safe operation that never modifies your local work
- Allows you to review changes before merging

git init
git clean -fxfd -> Deletes all untracked files & directories(including ones in .gitignore) from working directory
git clone https://github.com/hukanege.git
git tag -a 1.2.9 -m "Bump version"
git add README.md
git add .
git rm README.md

git commit -m "commit message"
git commit -a -m "commit message" -> add + commit 
git commit --amend                -> Modify the last commit
git remote add origin git@github.com:gtopcu/aws-templates.git
git remote add origin https://github.com/gtopcu/aws-templates.git

file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-branch.html
git branch newbranch --set-upstream-to=origin/newbranch
git branch -l (list)                                             
git branch -m (rename) | -M (-f --force) [<oldbranch>] <newbranch>
git branch -c (copy)   | -C (-f --force) [<oldbranch>] <newbranch>   
git branch -d (delete) | -D (-f --force) -r(remote) -a(all) <newbranch>

file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-checkout.html
git checkout newbranch (must exist or error)
git checkout -b (create new) | -B (reset if exists) <newbranch> [<start-point>]   
git checkout -b main --track | --no-track
git checkout -b main --track origin/main
git checkout main | <commit>

git switch branch
git fork

git fetch -> download only, do not merge
git merge
git pull --autostash -> fetch + merge
git push -u origin main --set-upstream origin main --force
git pull-request
git show abc123def456789 
git status
git log
git diff
git rebase origin main
git rebase --interactive HEAD~3 -> Interactive Rebase to Rearrange Commits
git reset --soft|mixed|hard HEAD~1  -> Undo the last commit & keep the changes -> staged for a new commit
git reset HEAD~1                    -> Undo the last commit & keep the changes -> unstaged
git reset --hard HEAD~1             -> Remove the last commit and discard all changes made in that commit
git revert HEAD                     -> Keep the record of commit history & undo the last commit without removing it from history
                                       Creates a new commit that reverses the changes made in the last commit
git restore <file(s)>               -> Discard changes in the working directory
git reflog                          -> Retrieve lost commit references
git cherry-pick <commit-hash>       -> Do this multiple times if multiple commits are wanted

------------------------------------------------------------------------------------------------------------------------

Configure SSH Keys for GitHub
https://docs.github.com/en/authentication/troubleshooting-ssh/error-permission-denied-publickey
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

!!! chown must be hukanege for public  & private key & config, not root!
!!! ~ install into /var/root for all users
# list all SSH keys
$ ls -al /Users/gtopcu/.ssh
# start the ssh-agent in the background
$ eval "$(ssh-agent -s)"
> Agent pid 59566
$ ssh-add -l -E sha256
> 2048 SHA256:274ffWxgaxq/tSINAykStUL7XWyRNcRTlcST1Ei7gBQ /Users/gtopcu/.ssh/id_rsa (RSA)

# if key value doesn't exist:
$ ssh-keygen -t ed25519 -C "gtopcu@gmail.com"
$ open /Users/gtopcu/.ssh/config

# if config doesn't exist:
$ touch /Users/gtopcu/.ssh/config
Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile /Users/gtopcu/.ssh/id_ed25519
$ ssh-add --apple-use-keychain /Users/gtopcu/.ssh/id_ed25519
$ ssh-add -K ~/.ssh/id_ed25519 (for older macs)

# Add new key to GitHub
# Copies the contents of the id_ed25519.pub file to your clipboard
$ pbcopy < /Users/gtopcu/.ssh/id_ed25519.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPenYHBDr7gp996CswqDf1mj6XuuRGo+Xn+F8dp9yv14 gtopcu@gmail.com

# Add key: https://github.com/settings/keys


---

Ignoring files
https://www.atlassian.com/git/tutorials/saving-changes/gitignore#git-ignore-patterns
git rm --cached debug.log

Enforcing commit message/format
https://code-maven.com/enforcing-commit-message-format-in-git


1. 𝐠𝐢𝐭 𝐝𝐢𝐟𝐟: Show file differences not yet staged.
2. 𝐠𝐢𝐭 𝐜𝐨𝐦𝐦𝐢𝐭 -𝐚 -𝐦 "𝐜𝐨𝐦𝐦𝐢𝐭 𝐦𝐞𝐬𝐬𝐚𝐠𝐞": Commit all tracked changes with a message.
3. 𝐠𝐢𝐭 𝐜𝐨𝐦𝐦𝐢𝐭 --𝐚𝐦𝐞𝐧𝐝: Modify the last commit.
4. 𝐠𝐢𝐭 𝐬𝐭𝐚𝐭𝐮𝐬: Show the state of your working directory.
5. 𝐠𝐢𝐭 𝐚𝐝𝐝 𝐟𝐢𝐥𝐞_𝐩𝐚𝐭𝐡: Add file(s) to the staging area.
6. 𝐠𝐢𝐭 𝐜𝐡𝐞𝐜𝐤𝐨𝐮𝐭 -𝐛 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Create and switch to a new branch.
7. 𝐠𝐢𝐭 𝐜𝐡𝐞𝐜𝐤𝐨𝐮𝐭 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Switch to an existing branch.
8. 𝐠𝐢𝐭 𝐜𝐡𝐞𝐜𝐤𝐨𝐮𝐭 <𝐜𝐨𝐦𝐦𝐢𝐭>: Switches the working directory to a specific commit.
9. 𝐠𝐢𝐭 𝐩𝐮𝐬𝐡 𝐨𝐫𝐢𝐠𝐢𝐧 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Push a branch to a remote.
10. 𝐠𝐢𝐭 𝐩𝐮𝐥𝐥: Fetch and merge remote changes.
11. 𝐠𝐢𝐭 𝐟𝐞𝐭𝐜𝐡: Fetch changes from the remote repository without merging.
12. 𝐠𝐢𝐭 𝐫𝐞𝐛𝐚𝐬𝐞 -𝐢: Rebase interactively, rewrite commit history.
13. 𝐠𝐢𝐭 𝐫𝐞𝐛𝐚𝐬𝐞 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Rebase the current branch onto another branch.
14. 𝐠𝐢𝐭 𝐜𝐥𝐨𝐧𝐞: Create a local copy of a remote repo.
15. 𝐠𝐢𝐭 𝐦𝐞𝐫𝐠𝐞: Merge branches together.
16. 𝐠𝐢𝐭 𝐥𝐨𝐠 --𝐬𝐭𝐚𝐭: Show commit logs with stats.
17. 𝐠𝐢𝐭 𝐬𝐭𝐚𝐬𝐡: Stash changes for later.
18. 𝐠𝐢𝐭 𝐬𝐭𝐚𝐬𝐡 𝐩𝐨𝐩: Apply and remove stashed changes.
19. 𝐠𝐢𝐭 𝐬𝐡𝐨𝐰 𝐜𝐨𝐦𝐦𝐢𝐭_𝐢𝐝: Show details about a commit.
20. 𝐠𝐢𝐭 𝐫𝐞𝐬𝐞𝐭 𝐇𝐄𝐀𝐃~1: Undo the last commit, preserving changes locally.
21. 𝐠𝐢𝐭 𝐛𝐫𝐚𝐧𝐜𝐡 -𝐃 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Delete a branch forcefully.
22. 𝐠𝐢𝐭 𝐫𝐞𝐬𝐞𝐭: Undo commits by moving branch reference.
23. 𝐠𝐢𝐭 𝐫𝐞𝐯𝐞𝐫𝐭 𝐜𝐨𝐦𝐦𝐢𝐭_𝐢𝐝: Create a new commit that undoes the changes of a specific commit.
24. 𝐠𝐢𝐭 𝐜𝐡𝐞𝐫𝐫𝐲-𝐩𝐢𝐜𝐤 𝐜𝐨𝐦𝐦𝐢𝐭_𝐢𝐝: Apply changes from a specific commit.
24. 𝐠𝐢𝐭 𝐛𝐫𝐚𝐧𝐜𝐡: Lists branches.
26. 𝐠𝐢𝐭 𝐫𝐞𝐬𝐞𝐭 --𝐬𝐨𝐟𝐭 𝐇𝐄𝐀𝐃^: Undo the last commit, but keep the changes.
27. 𝐠𝐢𝐭 𝐫𝐞𝐬𝐞𝐭 --𝐡𝐚𝐫𝐝: Resets everything to a previous commit, erasing all uncommitted changes.
28: 𝐠𝐢𝐭 𝐛𝐫𝐚𝐧𝐜𝐡 --𝐬𝐞𝐭-𝐮𝐩𝐬𝐭𝐫𝐞𝐚𝐦-𝐭𝐨 𝐫𝐞𝐦𝐨𝐭𝐞_𝐛𝐫𝐚𝐧𝐜𝐡: Sets the upstream branch to the specified remote branch.
