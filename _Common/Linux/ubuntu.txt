
Debian -> Ubuntu

docker run -it ubuntu bash

ll == ls -al
export PATH=$PATH:/usr/local/go/bin

chown -R hukanege /src/
sudo chmod +x myscript.sh
sudo bash myscript.sh
sudo rm -rf /*

/var/log
/etc/hosts

which sudo
su -

https://askubuntu.com/questions/222348/what-does-sudo-apt-get-update-do/222352#222352
/etc/apt/sources.list
sudo apt --help
sudo apt search pypy3
sudo apt list --installed
sudo apt list --upgradable
sudo add-apt-repository ppa:vbernat/haproxy-2.6 -> /etc/apt/sources.list

sudo apt update -y
sudo apt install --no-install-recommends foo
sudo apt update && sudo apt upgrade -y
sudo apt update && sudo apt install foo bar -y
sudo apt update && sudo apt dist-upgrade foo bar -y
sudo service ssh --status --status-all --enable --disable --start --full-restart --stop
sudo apt install systemd -> Install systemd and the systemctl utility
sudo systemctl enable disable status start stop restart --now ssh
ps auwx | grep nginx

------------------------------------------------------------------------------------------------
Install Python3 + pip + venv
------------------------------------------------------------------------------------------------
sudo apt update -y
sudo apt install python3 python3-pip python3-venv -y

mkdir my_project
cd my_project
python3 -m venv venv
source venv/bin/activate

------------------------------------------------------------------------------------------------
Install OpenSSH - enabled after Ubuntu 18
https://www.youtube.com/watch?v=6vTcH_kMrhU
------------------------------------------------------------------------------------------------
sudo apt update -y && sudo apt upgrade -y
sudo apt install -y openssh-server
sudo service status ssh
sudo service start ssh
sudo service enable --now ssh
sudo service disable --now ssh
sudo ss -tunlp | grep ssh
ssh ubuntu@10.0.0.0
ssh root@10.0.0.0

sudo /etc/init.d/sshd start
sudo passwd root -> generate password for root

chmod 400 keypair.pem
ssh -i keypair.pem username@ip_address

ssh-keygen
ssh-copy-id -> to copy public key to the server ~/.ssh

~/.ssh/authorized_keys
~/.ssh/id_rsa.pub
~/.ssh/id_rsa

cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
cat ~/.ssh/id_rsa.pub | ssh username@remote_host "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"
sudo nano /etc/ssh/sshd_config
PasswordAuthentication no

------------------------------------------------------------------------------------------------
Install UFW
------------------------------------------------------------------------------------------------
sudo apt install --no-install-recommends ufw
sudo ufw allow ssh
sudo ufw allow ssh
sudo ufw deny 22/tcp
sudo ufw enable
sudo ufw disable

------------------------------------------------------------------------------------------------
Install HAProxy
https://www.youtube.com/watch?v=KJUVzg0fdnQ
https://sistemdostu.com/haproxy-nedir-nasil-kurulur
------------------------------------------------------------------------------------------------
sudo apt install --no-install-recommends software-properties-common
add-apt-repository ppa:vbernat/haproxy-2.6
apt install haproxy-2.6.\*
sudo service status | enable haproxy
nano /etc/haproxy/haproxy.cfg
service restart haproxy
sudo haproxy -f /etc/haproxy/haproxy.cfg - without restart

------------------------------------------------------------------------------------------------
Install SSL Cert from Let's Encrypt & Certbot
https://www.youtube.com/watch?v=KJUVzg0fdnQ
https://sistemdostu.com/haproxy-nedir-nasil-kurulur
------------------------------------------------------------------------------------------------

1. Install Certbot, the Let's Encrypt client:
   sudo apt update
   sudo apt install certbot

2. Obtain an SSL certificate using Certbot:
   sudo certbot certonly --manual
   This will walk you through the process of obtaining a certificate.
   You'll need to follow the instructions provided, which may involve creating DNS records or placing
   a file on your web server.

3. Once you have the certificate, you can configure your web server to use it.

   For Apache, edit the Apache configuration file (usually /etc/apache2/sites-available/your_domain.conf)
   and add the following lines:
   SSLCertificateFile /etc/letsencrypt/live/your_domain/fullchain.pem
   SSLCertificateKeyFile /etc/letsencrypt/live/your_domain/privkey.pem

   For Nginx, edit the Nginx configuration file (usually /etc/nginx/sites-available/your_domain) and add the following lines:
   ssl_certificate /etc/letsencrypt/live/your_domain/fullchain.pem;
   ssl_certificate_key /etc/letsencrypt/live/your_domain/privkey.pem;


---------------------------------------------------------------------------------------------------

docker run -it --entrypoint /bin/bash
docker exec -it container_name /bin/bash
docker run -it ubuntu bash
docker attach

export PATH=$PATH:/usr/local/go/bin
/var/log 
/etc/hosts 
/etc/apt/sources.list
.zshrc
.zprofile
.bashrc
.bash_profile
.profile

sudo apt --help
sudo apt search python3
sudo apt list --installed
sudo apt list --upgradable
sudo apt update && sudo apt upgrade -y
sudo apt update && sudo apt install foo bar -y
sudo service ssh --status --status-all --enable --disable --start --full-restart --stop
sudo systemctl enable disable status start stop restart --now ssh
sudo chown -R hukanege /src/
sudo chmod +x myscript.sh
sudo bash myscript.sh
sudo chmod 400 keypair.pem
sudo chmod u+rwx keypair.pem
ssh -i keypair.pem ec2-user@54.78.7.114
sudo rm -rf /*
cat/touch/nano/head/tail -n 10

find . -maxdepth 1 -name "*.txt"
find . -type f -name "*.pyc" -delete
find . -type d -name '.venv' -delete
find . -type d -name "__pycache__" -exec rm -rf {} +
find . -type f -exec cat {} \;

tar -xf file.tar.gz
tar -cf . file.tar.gz

ps auwx | awk '/contains/' | '!/notcontains/'

grep "foo" file.txt      
ls -l | grep "pattern"
-v inverts the match 
-E enables extended regex support (=egrep)
-e allows multiple patterns
-i makes the search case-insensitive

ps auwx | grep -E "^(?!.*foo).*$"          -> does not contain foo
               -E "^(?!.*foo)(?!.*bar).*$" -> does not contain foo or bar"
               -E "^[^0-9]*$"              -> does not contain numbers
               -E "^[a-zA-Z0-9\s]*$"       -> does not contain special characters

grep -v "foo" file.txt              -> does not contain foo
grep -v -e "foo" -e "bar" file.txt  -> does not contain foo or bar"
grep -v "[0-9]" file.txt            -> does not contain numbers
                                    -> does not contain special characters


curl -X POST --d '{ "input": "data" }' --url https://41823adf93.execute-api.us-east-1.amazonaws.com
curl -s -o /dev/null -w "%{http_code}\n" example.com
curl -s -o /dev/null -w "\nStatus: %{http_code}\nTime: %{time_total}s\nSize: %{size_download} bytes\n" example.com

echo '{"name": "John"}' | jq -r '.name' -> John

echo "delete this" > /dev/null   -> Text is discarded
command > /dev/null              -> Discard standard output
command > /dev/null 2>&1         -> Discard both standard output and errors
cat /dev/null > logfile          -> Clears the content of logfile


------------------------------------------------------------------------------------------------------------------------

None del len type id any/all is/not in/not sorted reversed isinstance 
sum min max pow round floor enumerate map filter reduce zip

psycopg
pip install -r requirements.txt
python3 -m venv venv
source venv/bin/activate
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
os.getcwd()
os.listdir()
os.makedirs(my_dir, exists_ok=True)
current_dir = os.path.dirname(os.path.abspath(__file__))
file_path = os.path.join(current_dir, filename)
danger = [] if danger is None else danger
[i for i in items if i%2==0]
[[random.randint(0, 100) for _ in range(size)] for _ in range(size)]
[[0] * 5]
A = np.random.rand(size, size) -> np.dot(A, A)
f"Total time: {end-start:.2f}"
" ".join(mylist) mytext.strip() b"OxAdkwaF"
client = boto3.client(service_name="bedrock_runtime")
from botocore.exceptions import ClientError
err.response["Error"]["Code"]
err.response["Error"]["Message"]
