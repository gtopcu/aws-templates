
Debian -> Ubuntu

docker run -it ubuntu bash

export PATH=$PATH:/usr/local/go/bin

chown -R hukanege /src/
chmod u+x myscript.sh
bash myscript.sh
rm -rf /*

------------------------------------------------------------------------------------
Updating app sources list:
nano /etc/apt/sources.list  -> Ctrl+O(save) Ctrl+X(exit) Ctrl+K(cut) Ctrl+U(paste)

deb http://deb.debian.org/debian bullseye main
deb http://security.debian.org/debian-security bullseye-security main
deb http://deb.debian.org/debian bullseye-updates main
------------------------------------------------------------------------------------

apt list search show install reinstall remove autoremove update upgrade full-upgrade edit-sources satisfy
apt --help
apt search pypy3
apt list --installed
apt list --upgradable
add-apt-repository ppa:vbernat/haproxy-2.6 -> /etc/apt/sources.
apt update -y
apt install --no-install-recommends foo
apt update && sudo apt upgrade -y
apt update && sudo apt install foo bar -y
apt update && sudo apt dist-upgrade foo bar -y
service ssh --status --status-all --enable --disable --start --full-restart --stop
apt install systemd -> Install systemd and the systemctl utility
systemctl enable disable status start stop restart --now ssh
ps aux(w) | grep nginx

------------------------------------------------------------------------------------------------
Install OpenSSH - enabled after Ubuntu 18
https://www.youtube.com/watch?v=6vTcH_kMrhU
------------------------------------------------------------------------------------------------
apt update -y && sudo apt upgrade -y
apt install -y openssh-server
service ssh --status --status-all --enable --disable --start --full-restart --stop --now
ss -tunlp | grep ssh
ssh ubuntu@10.0.0.0
ssh root@10.0.0.0

/etc/init.d/sshd start
service sshd restart (OpenSSH daemon)

passwd root -> generate password for root

chmod 400 keypair.pem
ssh -i keypair.pem ubuntu@ip_address

ssh-keygen
ssh-copy-id -> to copy public key to the server ~/.ssh

~/.ssh/authorized_keys
~/.ssh/id_rsa.pub
~/.ssh/id_rsa

cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
cat ~/.ssh/id_rsa.pub | ssh username@remote_host "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"
nano /etc/ssh/sshd_config
PasswordAuthentication no

------------------------------------------------------------------------------------------------
Install UFW
------------------------------------------------------------------------------------------------
apt install --no-install-recommends ufw
ufw enable
ufw disable
ufw allow ssh
ufw deny 22/tcp

------------------------------------------------------------------------------------------------
Install HAProxy
https://www.youtube.com/watch?v=KJUVzg0fdnQ
https://sistemdostu.com/haproxy-nedir-nasil-kurulur
------------------------------------------------------------------------------------------------
apt install --no-install-recommends software-properties-common
add-apt-repository ppa:vbernat/haproxy-2.6
apt install haproxy-2.6.\*
service status | enable haproxy
nano /etc/haproxy/haproxy.cfg
service restart haproxy
haproxy -f /etc/haproxy/haproxy.cfg - without restart

------------------------------------------------------------------------------------------------
Install SSL Cert from Let's Encrypt & Certbot
https://www.youtube.com/watch?v=KJUVzg0fdnQ
https://sistemdostu.com/haproxy-nedir-nasil-kurulur
------------------------------------------------------------------------------------------------

1. Install Certbot, the Let's Encrypt client:
   sudo apt update
   sudo apt install certbot

2. Obtain an SSL certificate using Certbot:
   sudo certbot certonly --manual
   This will walk you through the process of obtaining a certificate.
   You'll need to follow the instructions provided, which may involve creating DNS records or placing
   a file on your web server.

3. Once you have the certificate, you can configure your web server to use it.

   For Apache, edit the Apache configuration file (usually /etc/apache2/sites-available/your_domain.conf)
   and add the following lines:
   SSLCertificateFile /etc/letsencrypt/live/your_domain/fullchain.pem
   SSLCertificateKeyFile /etc/letsencrypt/live/your_domain/privkey.pem

   For Nginx, edit the Nginx configuration file (usually /etc/nginx/sites-available/your_domain) and add the following lines:
   ssl_certificate /etc/letsencrypt/live/your_domain/fullchain.pem;
   ssl_certificate_key /etc/letsencrypt/live/your_domain/privkey.pem;

--------------------------------------------------------------------------------------------------------
Installing Python on Ubuntu/Debian:
--------------------------------------------------------------------------------------------------------
apt install python-3 python3-pip python3-venv -y

python3-minimal:  Basic Python interpreter (~10MB)
                  -> Basic interpreter, essential standard lib, core runtime dependencies
                  -> Not included: pip, venv, dev headers, documentation, IDLE, distuttils, sqlite3, ssl, email, unittest...
python3:          Standard Python installation (~30MB)
python3-full:     Complete Python environment (~100MB+)
                    -> standard lib, pip, debugger(pdb)
                    -> distutils, idle3(python ide), python3-dev python3-venv
                    -> tkinter(gui), documentation tools, test fws, build/networking tools, XML/SQLite, SSL/TLS
--------------------------------------------------------------------------------------------------------