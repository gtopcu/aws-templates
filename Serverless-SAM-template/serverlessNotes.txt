Serverless Notes

Lambda:
- Lambda 128MB-10GB memory, 256kb async/6MB sync payload, 15min timeout
- Lambda 128MB-> 0.5vCPU, 1.5GB 2vCPU, 10GB 6vCPU
- Lambda sync: API GW, Cognito, async: S3, EventBridge, SNS, polling: SQS, Kinesis/Dynamo Streams
- Lambda destinations -> success & fail for async, fail for polling

DynamoDB:
- Dynamo 400kb max item size, 2KB for PK 1KB for SK, String, Number. Binary, Boolean, List, Map, Set
- DynamoDB global indexes -> Key does not have to be unique
- Dynamo IA -> %60 cheaper on storage, %25 more expensive on reads & writes

API GW:
- API GW 10k req/s 30sec 10MB max
- API GW returns request ID
- API GW -> SQS -> MessageID -> can be tracked by client

SQS:
- SQS Batching works in 5 concurrent lambdas max
- SQS FIFO can deduplicate by deduplicationID, order guaranteed for groupID
- SQS errors -> ApproximateAgeOfOldestMessage CloudWatch Metric + Alarm, queue redrive + event forking pipeline

SNS: 
- SNS can filter/retry to 3rd party HTTP
- SNS ->  Lambda retries 3 times for execution errors. Invocation errors: 6 hours default 
(not enough concurrency/throttling/large size/timeout etc). Performs 3 immediate tries, 2 at 1 second apart, 
10 backing off from 1 second to 20 seconds, and 100,000 at 20 seconds apart

EventBridge:
- EventBridge can better filter & transform S3 events but more expensive

StepFunctions:
- StepFunctions StartExecution, WaitForCallback, retry jitter, wait(sleep), intrinsic functions
- StepFunctions Standard billed per transitions, express billed by  duration, 256KB max
- StepFunctions choice states do not have catch/retry

Kinesis:
- Kinesis DataStreams PartitionKey & SequenceNumber(unique per partition), ordered, exactly once, replays, multiple consumers, errors block the shard
- Kinesis DataStreams Write 1000 records/sec & 1MB/sec, Read 5t/sec 2MB/sec per shard, can use enhanced fan-out for more consumers
- Kinesis DataStreams - 1 day duraction default. Errors -> iterator age, bisect batch, max retry, max record age, on-failure destination
- Kinesis DataStreams aggregation to send/receive multiple records per record -> Kinesis Aggregation Library for Lambda
- Kinesis Firehose -> S3, OpenSearch, buffers, transform/filter/enrich, no order guarantee, at least once, single target, does 3 retries